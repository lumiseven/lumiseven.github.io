import{_ as s,c as n,o as a,b as l}from"./app.6723d690.js";const A=JSON.parse('{"title":"Python 3.12 更新内容","description":"","frontmatter":{},"headers":[],"relativePath":"doc/python/python_3_12_new.md","lastUpdated":1697772045000}'),p={name:"doc/python/python_3_12_new.md"},o=l(`<h1 id="python-3-12-更新内容" tabindex="-1">Python 3.12 更新内容 <a class="header-anchor" href="#python-3-12-更新内容" aria-hidden="true">#</a></h1><h2 id="改善报错信息" tabindex="-1">改善报错信息 <a class="header-anchor" href="#改善报错信息" aria-hidden="true">#</a></h2><ul><li>来自官方标准库的模块现在可以在报<code>NameError</code>时提示问题原因，比如<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">version_info</span></span>
<span class="line"><span style="color:#82AAFF;">Traceback </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">most recent call last</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">File </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;stdin&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> line </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">module</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">NameError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sys</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> defined</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;"> Did</span><span style="color:#A6ACCD;"> you forget to </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sys</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"></span></code></pre></div></li><li>当实例内报<code>NameError</code>时也会提示问题原因，比如成员方法引用了未定义的变量，而这个变量名又和成员变量名相同时会提示用户是否忘记加<code>self</code>，比如<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">...   </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">...     self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">blech</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">...   </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">...     something </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> blech</span></span>
<span class="line"><span style="color:#A6ACCD;">... </span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">A</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#82AAFF;">Traceback </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">most recent call last</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">File </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;stdin&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> line </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">module</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">File </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;stdin&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> line </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> foo</span></span>
<span class="line"><span style="color:#FFCB6B;">NameError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">blech</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> defined</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;"> Did</span><span style="color:#A6ACCD;"> you mean</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">self.blech</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"></span></code></pre></div></li><li>当导入模块时<code>import</code>和<code>from</code>写反报<code>SyntaxError</code>时也会提示原因，比如<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">z</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">z</span></span>
<span class="line"><span style="color:#A6ACCD;">File </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;stdin&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> line </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">z</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">z</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span class="line"><span style="color:#FFCB6B;">SyntaxError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Did you mean to use </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">from ... import ...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> instead?</span></span>
<span class="line"></span></code></pre></div></li><li>在导入模块错误报<code>ImportError</code>时也会提示应该导入哪个对象，比如<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> collections </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> chainmap</span></span>
<span class="line"><span style="color:#82AAFF;">Traceback </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">most recent call last</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">File </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;stdin&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> line </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">module</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">ImportError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> cannot </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">chainmap</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">collections</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(/</span><span style="color:#A6ACCD;">home</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">lumiseven</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">tool</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">miniconda3</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">envs</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">lib</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">python3</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">12</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">collections</span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">py</span><span style="color:#89DDFF;">).</span><span style="color:#F07178;"> Did</span><span style="color:#A6ACCD;"> you mean</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ChainMap</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">?</span></span>
<span class="line"></span></code></pre></div></li></ul><h2 id="新功能" tabindex="-1">新功能 <a class="header-anchor" href="#新功能" aria-hidden="true">#</a></h2><h3 id="pep701-f-string-的语义格式化" tabindex="-1">PEP701 f-string 的语义格式化 <a class="header-anchor" href="#pep701-f-string-的语义格式化" aria-hidden="true">#</a></h3><p>现在f-string内的表达式可以是任何合法的Python表达式，包括反斜杠、Unicode转义、多行表达式、注释和重复使用的引号种类。</p><ul><li><p>重复使用的引号种类：在Python 3.12版本中，用户可以在表达式里重复使用f-string使用过的引号种类，比如这里重复使用了双引号</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> songs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Take me back to Eden</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Alkaline</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Ascensionism</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;This is the playlist: </span><span style="color:#F78C6C;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">songs</span><span style="color:#89DDFF;">)</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">This is the playlist: Take me back to Eden, Alkaline, Ascensionism</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>因为这个改动，现在Python可以内嵌多个f-string了，比如以前只能内嵌4层</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;&quot;&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;&#39;&#39;</span><span style="color:#F78C6C;">{</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;</span><span style="color:#F78C6C;">{</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{1</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&#39;</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&#39;&#39;&#39;</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">2</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>现在则没有这种限制</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{1</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">2</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"></span></code></pre></div></li><li><p>多行表达式和注释：以前在f-string中必须把表达式写在一行内，可读性不高。现在没有这种限制，并且可以包含注释。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;This is the playlist: </span><span style="color:#F78C6C;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">([</span></span>
<span class="line"><span style="color:#82AAFF;">... Take me back to Eden</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">,  # My, my, those eyes like fire</span></span>
<span class="line"><span style="color:#82AAFF;">... </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Alkaline</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">              </span><span style="color:#676E95;font-style:italic;"># Not acid nor alkaline</span></span>
<span class="line"><span style="color:#82AAFF;">... </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Ascensionism</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;">           </span><span style="color:#676E95;font-style:italic;"># Take to the broken skies at last</span></span>
<span class="line"><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">])</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">&#39;</span><span style="color:#676E95;font-style:italic;">This is the playlist: Take me back to Eden, Alkaline, Ascensionism</span><span style="color:#89DDFF;font-style:italic;">&#39;</span></span>
<span class="line"></span></code></pre></div></li><li><p>反斜杠和Unicode字符：以前在f-string中不能使用反斜杠和Unicode转义。这会使得有的Unicode字符无法在f-string中使用，现在没有这种限制了。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;This is the playlist: </span><span style="color:#F78C6C;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">songs</span><span style="color:#89DDFF;">)</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">This </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> the playlist</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Take me back to Eden</span></span>
<span class="line"><span style="color:#A6ACCD;">Alkaline</span></span>
<span class="line"><span style="color:#A6ACCD;">Ascensionism</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;This is the playlist: </span><span style="color:#F78C6C;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\N{BLACK HEART SUIT}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">songs</span><span style="color:#89DDFF;">)</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">This </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> the playlist</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Take me back to Eden♥Alkaline♥Ascensionism</span></span>
<span class="line"></span></code></pre></div><p>一个有用的副作用就是现在报错的位置更精准了。比如在3.11中解释器不能告诉用户SyntaxError错误产生的位置。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> my_string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">x z y</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1}</span><span style="color:#C3E88D;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">File </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;stdin&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> line </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x z y</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">^^^</span></span>
<span class="line"><span style="color:#FFCB6B;">SyntaxError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> invalid syntax</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;"> Perhaps</span><span style="color:#A6ACCD;"> you forgot a comma?</span></span>
<span class="line"></span></code></pre></div><p>现在可以获取到报错位置了。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> my_string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">x z y</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1}</span><span style="color:#C3E88D;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">File </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;stdin&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> line </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    my_string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">x z y</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;</span><span style="color:#F78C6C;">{1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1}</span><span style="color:#C3E88D;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">^^^</span></span>
<span class="line"><span style="color:#FFCB6B;">SyntaxError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> invalid syntax</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;"> Perhaps</span><span style="color:#A6ACCD;"> you forgot a comma?</span></span>
<span class="line"></span></code></pre></div></li></ul><h3 id="pep709-内联行为" tabindex="-1">PEP709 内联行为 <a class="header-anchor" href="#pep709-内联行为" aria-hidden="true">#</a></h3><p>现在解释器会把字典、列表和集合理解成内联行为，而不是只用一次的数据结构，这样做会让程序运行速度提升一倍。但是，迭代器并不会理解成内联行为。</p><blockquote><p>这部分关系到虚拟机帧栈的优化，其API对普通用户并无感知。</p></blockquote><h3 id="pep688-buffer协议可以暴露给用户使用" tabindex="-1">PEP688 Buffer协议可以暴露给用户使用 <a class="header-anchor" href="#pep688-buffer协议可以暴露给用户使用" aria-hidden="true">#</a></h3><p>这个提案介绍了如何让Python用户使用到buffer协议，只需要让类实现<code>__buffer__()</code>方法就可以把它当作Buffer类使用。</p><p>与此同时，新的<code>collections.abc.Buffer</code>抽象基类提供了标准的暴露buffer的方式，比如在类型注解里。在新的<code>inspect.BufferFlags</code>枚举可以表示自定义的buffer资源。</p><h2 id="与类型注解相关的新功能" tabindex="-1">与类型注解相关的新功能 <a class="header-anchor" href="#与类型注解相关的新功能" aria-hidden="true">#</a></h2><h3 id="pep-692-用typeddict注解-kwargs-类型" tabindex="-1">PEP 692 用<code>TypedDict</code>注解 <code>**kwargs</code> 类型 <a class="header-anchor" href="#pep-692-用typeddict注解-kwargs-类型" aria-hidden="true">#</a></h3><p>PEP 484 介绍了如何注解函数签名中 <code>**kwargs</code> 的类型，但是所有的 <code>**kwargs</code> 类型都一样。这份提案提供了一种更精确的类型注解方案，比如</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> typing </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> TypedDict</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Unpack</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Movie</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TypedDict</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span></span>
<span class="line"><span style="color:#A6ACCD;">  year</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(**</span><span style="color:#A6ACCD;font-style:italic;">kwargs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Unpack</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Movie</span><span style="color:#89DDFF;">]):</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"></span></code></pre></div><h3 id="pep-698-静态类型注解的override装饰器" tabindex="-1">PEP 698 静态类型注解的override装饰器 <a class="header-anchor" href="#pep-698-静态类型注解的override装饰器" aria-hidden="true">#</a></h3><p><code>typing</code>模块中加入了一个新的装饰器<code>typing.override()</code>，它表明被它修饰的方法需要复写其父类的同名方法（类似于Java的@Overide）。它可以让类型检查该方法是否正确复写了父类的方法。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> typing </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> override</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Base</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_color</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">blue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GoodChild</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Base</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">override</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># ok: overrides Base.get_color</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_color</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yellow</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BadChild</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Base</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">override</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># type checker error: does not override Base.get_color</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_colour</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h3 id="pep-695-参数类型语法" tabindex="-1">PEP 695 参数类型语法 <a class="header-anchor" href="#pep-695-参数类型语法" aria-hidden="true">#</a></h3><p>在PEP 484 中，Python对泛型类和方法类型注解的支持有点啰嗦且不够精确，并需要一套更直白的类型声明方案。本提案引入了一种新的、简洁的、直白的类型注解方案。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">args</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Iterable</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">T</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> -&gt; T</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__getitem__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> T</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span>
<span class="line"></span></code></pre></div><p>此外，本方案还引入了一种新type别名声明方案，并可以通过<code>type</code>创建一个<code>TypeAliasType</code>实例。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> Point </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tuple</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">float</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">float</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>类型别名同样可以加入泛型。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> Point</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tuple</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> T</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>新的语法规则允许声明<code>TypeVarTuple</code>和<code>ParamSpec</code>，就像声明<code>TypeVar</code>一样。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> IntFunc</span><span style="color:#89DDFF;">[**</span><span style="color:#A6ACCD;">P</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Callable</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">P</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># ParamSpec</span></span>
<span class="line"><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> LabeledTuple</span><span style="color:#89DDFF;">[*</span><span style="color:#A6ACCD;">Ts</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tuple</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Ts</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># TypeVarTuple</span></span>
<span class="line"><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> HashableSequence</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Hashable</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Sequence</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># TypeVar with bound</span></span>
<span class="line"><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> IntOrStrSequence</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">)]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Sequence</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># TypeVar with constraints  </span></span>
<span class="line"></span></code></pre></div><p>类型别名、范围以及限制类型只有在解释器需要的时候创建，也就是说别名可以在代码其他地方被重写。</p><p>参数类型的声明作用于声明的范围，对其外部是不生效的。举个例子，函数参数的类型注解可以作用于其派生类的方法或该类的其他地方。然而，它不能作用于模块范围内的其他地方，即使这个地方位于该类的定义的后面。具体使用方法可以参考Type parameter lists章节。</p><p>为了支持这种范围的类型注解，现在虚拟机引入了一种新的范围——注解范围（annotation scope）。在大多数情况下，这个范围等同于函数的范围，但是它会和不同的类的范围发生关联。在Python 3.13中，所有的类型注解都会在这个范围内。</p><h2 id="其他语言改动-部分" tabindex="-1">其他语言改动（部分） <a class="header-anchor" href="#其他语言改动-部分" aria-hidden="true">#</a></h2><ul><li>增加了环境变量PYTHONPERFSUPPORT、命令行参数-X perf以及API sys.activate_stack_trampoline()、sys.deactivate_stack_trampoline()和sys.is_stack_trampoline_active()以支持Linux优化（Python support for the Linux perf profiler）</li><li>如果底层字典结构是可哈希的，那么types.MappingProxyType实例现在也是可哈希的</li><li>语法分析器现在可以分析空字节</li><li>现在GC只会在字节码之间的暂停点运行，而不是分配内存的时候运行。另外，GC还会在调用PyErr_CheckSignals()时运行。这样，在Python的C扩展中解释器可以执行大量的C语言代码而不去执行Python代码，以便减少GC运行的可能性。</li><li>你可以在生成的数据中使用海象运算符（:=）来赋值，比如[(b := 1) for a, b.prop in some_iter]</li><li>slice对象现在是可哈希的，所以可以用作字典的键。</li><li>sum()方法现在用了新的求和算法，所以现在更精确了。</li></ul>`,34),e=[o];function t(c,r,y,D,F,C){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
