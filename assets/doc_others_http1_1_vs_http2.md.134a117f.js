import{_ as s,c as n,o as a,b as l}from"./app.d1465539.js";const i=JSON.parse('{"title":"http1.1 vs http2","description":"","frontmatter":{},"headers":[],"relativePath":"doc/others/http1_1_vs_http2.md","lastUpdated":1680433625000}'),p={name:"doc/others/http1_1_vs_http2.md"},o=l(`<h1 id="http1-1-vs-http2" tabindex="-1">http1.1 vs http2 <a class="header-anchor" href="#http1-1-vs-http2" aria-hidden="true">#</a></h1><h2 id="http-2与http-1-1的主要区别如下" tabindex="-1">HTTP/2与HTTP/1.1的主要区别如下： <a class="header-anchor" href="#http-2与http-1-1的主要区别如下" aria-hidden="true">#</a></h2><ol><li><p>二进制格式：HTTP/2采用二进制格式而非HTTP/1.1的文本格式，这意味着HTTP/2中的请求和响应将被分割成更小的帧，以便更好地管理和优化数据传输。</p></li><li><p>多路复用：HTTP/2支持多路复用，这意味着可以在一个连接上同时传输多个请求和响应，而HTTP/1.1则需要在一个连接上逐个传输请求和响应。</p></li><li><p>服务器推送：HTTP/2支持服务器推送，这意味着服务器可以在客户端请求之前发送额外的资源，从而提高性能和响应时间。</p></li><li><p>首部压缩：HTTP/2采用首部压缩技术，将HTTP/1.1中的头信息压缩，减少了网络传输的数据量，提高了传输效率。</p></li><li><p>流量控制：HTTP/2支持流量控制，这意味着可以控制每个流的数据传输速率，从而避免了某些流占用过多的带宽，导致其他流的传输速度变慢。</p></li></ol><p>综上所述，HTTP/2相对于HTTP/1.1具有更高的性能和效率，可以更好地适应现代Web应用程序的需要。</p><h2 id="多路复用" tabindex="-1">多路复用 <a class="header-anchor" href="#多路复用" aria-hidden="true">#</a></h2><p>HTTP/2 多路复用是指在一条连接上同时传输多个 HTTP 请求和响应。这种方式相比 HTTP/1.x 的串行传输，可以大大提高网络传输的效率。</p><p>HTTP/2 多路复用是通过将多个请求和响应封装在一个称为帧（frame）的数据块中来实现的。每个帧都有一个唯一的标识符，称为流标识符（stream identifier）。这个标识符用于将帧与特定的请求或响应相关联。</p><h3 id="java" tabindex="-1">java <a class="header-anchor" href="#java" aria-hidden="true">#</a></h3><p>下面是一个使用 Java 代码实现 HTTP/2 多路复用的示例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">io</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">IOException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">net</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">InetSocketAddress</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">CountDownLatch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">javax</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">net</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ssl</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">SSLContext</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">javax</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">net</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ssl</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">SSLEngine</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">javax</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">net</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ssl</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">SSLParameters</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">alpn</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ALPN</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">alpn</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ALPN</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ClientProvider</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">alpn</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ALPN</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ServerProvider</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">HttpFields</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">HttpMethod</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">HttpScheme</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">HttpVersion</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">HTTP2Cipher</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">HTTP2Client</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">api</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Session</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">api</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Stream</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">client</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">HTTP2ClientConnectionFactory</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">frames</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">HeadersFrame</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">frames</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">HttpFrame</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">frames</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">SettingsFrame</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Parser</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Parser</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Listener</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ParserFactory</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">http2</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Parser</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Listener</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Adapter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">io</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ByteBufferPool</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">io</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">MappedByteBufferPool</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Callback</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">eclipse</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">jetty</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ssl</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">SslContextFactory</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Http2MultiplexingExample</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// HTTP/2 客户端连接工厂</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">HTTP2ClientConnectionFactory</span><span style="color:#A6ACCD;"> connectionFactory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HTTP2ClientConnectionFactory</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// SSL 上下文工厂</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SslContextFactory</span><span style="color:#A6ACCD;"> sslContextFactory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SslContextFactory</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        sslContextFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setCipherComparator</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">HTTP2Cipher</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">COMPARATOR</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SSLContext</span><span style="color:#A6ACCD;"> sslContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sslContextFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSslContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SSLParameters</span><span style="color:#A6ACCD;"> sslParameters </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sslContext</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDefaultSSLParameters</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        sslParameters</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setApplicationProtocols</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">h2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">        sslContextFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setSslContext</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sslContext</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        sslContextFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setSslParameters</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sslParameters</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建 HTTP/2 客户端</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">HTTP2Client</span><span style="color:#A6ACCD;"> client </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HTTP2Client</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setByteBufferPool</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MappedByteBufferPool</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addConnectionFactory</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">connectionFactory</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setSslContextFactory</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sslContextFactory</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 注册 ALPN 提供程序</span></span>
<span class="line"><span style="color:#A6ACCD;">        ALPN</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ServerProvider</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unsupported</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">selected</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">protocol</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Server selected protocol: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> protocol</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">offer</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">protocols</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 创建 SSL 引擎</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SSLEngine</span><span style="color:#A6ACCD;"> engine </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sslContext</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createSSLEngine</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        engine</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setUseClientMode</span><span style="color:#89DDFF;">(true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 客户端连接</span></span>
<span class="line"><span style="color:#A6ACCD;">        client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">engine</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InetSocketAddress</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> Listener</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Adapter</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onConnect</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Session</span><span style="color:#A6ACCD;"> session</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Connected to server</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 发送 SETTINGS 帧</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">SettingsFrame</span><span style="color:#A6ACCD;"> settingsFrame </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SettingsFrame</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                settingsFrame</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SettingsFrame</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">HEADER_TABLE_SIZE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">settings</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">settingsFrame</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> Callback</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Empty</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 发送请求</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">HttpFields</span><span style="color:#A6ACCD;"> requestFields </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HttpFields</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                requestFields</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">User-Agent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Jetty HTTP/2 Client</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">HeadersFrame</span><span style="color:#A6ACCD;"> headersFrame </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HeadersFrame</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> requestFields</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span>
<span class="line"><span style="color:#A6ACCD;">                headersFrame</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setStreamId</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                headersFrame</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setEndStream</span><span style="color:#89DDFF;">(false);</span></span>
<span class="line"><span style="color:#A6ACCD;">                session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newStream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">headersFrame</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> Stream</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Listener</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Adapter</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onHeaders</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Stream</span><span style="color:#A6ACCD;"> stream</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HeadersFrame</span><span style="color:#A6ACCD;"> frame</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Received headers: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> frame</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMetaData</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onData</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Stream</span><span style="color:#A6ACCD;"> stream</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpFrame</span><span style="color:#A6ACCD;"> frame</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Callback</span><span style="color:#A6ACCD;"> callback</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Received data: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> frame</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">                        callback</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">succeeded</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}).</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在这个示例中，我们创建了一个 HTTP/2 客户端连接工厂，以及一个 SSL 上下文工厂。然后创建了一个 HTTP/2 客户端，并将连接工厂和 SSL 上下文工厂添加到客户端中。</p><p>接着，我们注册了一个 ALPN 提供程序，用于在 SSL 握手期间协商使用的协议。我们创建了一个 SSL 引擎，并使用客户端连接工厂连接到服务器。</p><p>连接成功后，我们发送了一个 SETTINGS 帧，用于设置连接参数。然后发送了一个 HTTP GET 请求，这个请求包含一个 HEADERS 帧和一个 DATA 帧。在 HEADERS 帧中，我们设置了请求头，以及一个流标识符（stream identifier），用于将这个帧与这个请求关联起来。在 DATA 帧中，我们设置了请求体。</p><p>当服务器接收到这个请求后，会返回一个响应。这个响应也是通过一个 HEADERS 帧和一个 DATA 帧来传输的。在客户端中，我们可以通过实现 Stream.Listener 接口并重写 onHeaders() 和 onData() 方法来处理服务器返回的响应。</p><p>总结一下，HTTP/2 多路复用是通过将多个请求和响应封装在一个称为帧（frame）的数据块中来实现的。每个帧都有一个唯一的标识符，称为流标识符（stream identifier）。在 Java 中，我们可以使用 Jetty HTTP/2 客户端库来实现 HTTP/2 多路复用。</p><h3 id="kotlin" tabindex="-1">kotlin <a class="header-anchor" href="#kotlin" aria-hidden="true">#</a></h3><p>在 Kotlin 中，可以使用 OkHttp 库来实现 HTTP/2 多路复用。以下是一个示例代码：</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建 OkHttpClient 实例</span></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> client </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OkHttpClient</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">protocols</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">listOf</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Protocol</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">HTTP_2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Protocol</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">HTTP_1_1</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">build</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建 Request 对象</span></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> request1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://example.com/api/1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">build</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> request2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://example.com/api/2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">build</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建 Call 对象并发送请求</span></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> call1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">newCall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">request1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> call2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">newCall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">request2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 异步执行请求</span></span>
<span class="line"><span style="color:#A6ACCD;">call1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enqueue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Callback</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onFailure</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IOException</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> 处理请求失败逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onResponse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> 处理请求成功逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">call2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enqueue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Callback</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onFailure</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IOException</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> 处理请求失败逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onResponse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> 处理请求成功逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>在上述代码中，我们首先创建了一个 OkHttpClient 实例，并设置支持 HTTP/2 和 HTTP/1.1 协议。然后创建了两个 Request 对象，分别对应两个不同的 API 接口。最后使用 OkHttpClient 的 newCall 方法创建了两个 Call 对象，并使用 enqueue 方法异步执行请求。</p><p>由于 OkHttp 库默认支持 HTTP/2 多路复用，所以在同一个 TCP 连接上可以同时发送两个请求，而不需要等待前一个请求响应完毕。当服务器响应两个请求后，OkHttp 会自动将响应分配给对应的 Call 对象，并分别调用它们的 onResponse 回调方法。这样就实现了 HTTP/2 多路复用。</p><h3 id="python" tabindex="-1">python <a class="header-anchor" href="#python" aria-hidden="true">#</a></h3><p>下面是一个使用Python代码实现HTTP/2多路复用的示例：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> asyncio</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> aiohttp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> aiohttp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ClientSession</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> session</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://example.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> response1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\\</span></span>
<span class="line"><span style="color:#A6ACCD;">                   session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://example.net</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> response2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#82AAFF;"> response1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#82AAFF;"> response2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">asyncio</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre></div><p>在这个示例中，我们使用aiohttp库来发送两个HTTP请求：一个请求<a href="https://example.com" target="_blank" rel="noreferrer">https://example.com</a>，另一个请求<a href="https://example.net" target="_blank" rel="noreferrer">https://example.net</a>。由于我们使用的是同一个aiohttp的ClientSession对象，所以这两个请求将会共享同一个TCP连接，从而实现了HTTP/2的多路复用。</p><p>在这个示例中，我们使用了Python的async/await语法来编写异步代码。我们首先创建了一个aiohttp的ClientSession对象，然后使用这个对象来发送两个HTTP请求。我们使用async with语句来自动关闭这个ClientSession对象。</p><p>我们使用了Python的async with语句来同时处理两个请求。这样做的好处是可以实现并行处理多个请求，从而提高程序的效率。在这个示例中，我们使用了Python的await语句来等待每个请求的响应。由于我们使用的是同一个TCP连接，所以这两个请求可以并行处理，从而实现了HTTP/2的多路复用。</p><h2 id="http2-服务器推送" tabindex="-1">http2 服务器推送 <a class="header-anchor" href="#http2-服务器推送" aria-hidden="true">#</a></h2><p>HTTP/2服务器推送是一种提高性能和响应时间的技术，可以在客户端请求之前发送额外的资源。在HTTP/2中，服务器可以通过推送帧将资源推送到客户端，客户端可以选择接受或拒绝这些资源。</p><h3 id="java-1" tabindex="-1">java <a class="header-anchor" href="#java-1" aria-hidden="true">#</a></h3><p>在Java中，可以使用Netty框架来实现HTTP/2服务器推送。下面是一个示例代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建HTTP/2连接</span></span>
<span class="line"><span style="color:#C792EA;">Http2Connection</span><span style="color:#A6ACCD;"> connection </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultHttp2Connection</span><span style="color:#89DDFF;">(true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建HTTP/2帧处理器</span></span>
<span class="line"><span style="color:#C792EA;">Http2FrameProcessor</span><span style="color:#A6ACCD;"> frameProcessor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultHttp2FrameProcessor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">connection</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建HTTP/2服务器推送器</span></span>
<span class="line"><span style="color:#C792EA;">Http2ServerPusher</span><span style="color:#A6ACCD;"> serverPusher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultHttp2ServerPusher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">connection</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> frameProcessor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建HTTP/2流</span></span>
<span class="line"><span style="color:#C792EA;">Http2Stream</span><span style="color:#A6ACCD;"> stream </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> connection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">local</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">createStream</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建HTTP/2推送帧</span></span>
<span class="line"><span style="color:#C792EA;">Http2PushPromiseFrame</span><span style="color:#A6ACCD;"> pushPromiseFrame </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultHttp2PushPromiseFrame</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultHttp2Headers</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">content-type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 推送资源到客户端</span></span>
<span class="line"><span style="color:#A6ACCD;">serverPusher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pushPromiseFrame</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ChannelPromiseAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultChannelPromise</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">channel</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> ImmediateEventExecutor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">INSTANCE</span><span style="color:#89DDFF;">)));</span></span>
<span class="line"></span></code></pre></div><p>在这个示例中，我们首先创建了一个HTTP/2连接和一个帧处理器。然后我们使用帧处理器创建了一个HTTP/2服务器推送器，并创建了一个HTTP/2流。</p><p>接下来，我们创建了一个HTTP/2推送帧，并使用服务器推送器将资源推送到客户端。需要注意的是，在实际应用中，我们需要根据实际情况动态地选择推送哪些资源，以避免推送过多的资源导致客户端性能下降。</p><h3 id="kotlin-1" tabindex="-1">kotlin <a class="header-anchor" href="#kotlin-1" aria-hidden="true">#</a></h3><p>Kotlin OkHttp示例代码：</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> client </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OkHttpClient</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">protocols</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">listOf</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Protocol</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">HTTP_2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Protocol</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">HTTP_1_1</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">build</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> request </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://example.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">header</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Accept-Encoding</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gzip</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">build</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> call </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">newCall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enqueue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Callback</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onFailure</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IOException</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">printStackTrace</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onResponse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        if </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isSuccessful</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            throw </span><span style="color:#FFCB6B;">IOException</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">&quot;</span><span style="color:#FFCB6B;">Unexpected</span><span style="color:#A6ACCD;"> code $response&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> 读取服务器推送的资源</span></span>
<span class="line"><span style="color:#A6ACCD;">        response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">byteStream</span><span style="color:#89DDFF;">()?.</span><span style="color:#A6ACCD;">use { stream </span><span style="color:#89DDFF;">-&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> 处理服务器推送的资源</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>在这个示例中，我们首先创建了一个<code>OkHttpClient</code>实例，并设置了支持HTTP/2协议。然后，我们创建了一个<code>Request</code>实例，指定了要访问的URL，并设置了<code>Accept-Encoding</code>请求头，以指示我们接受gzip压缩的响应。</p><p>接下来，我们使用<code>client.newCall(request)</code>方法创建一个<code>Call</code>实例，并使用<code>call.enqueue()</code>方法异步执行请求。在<code>Callback</code>回调中，我们可以检查响应是否成功，并读取服务器推送的资源。</p><h3 id="python-1" tabindex="-1">python <a class="header-anchor" href="#python-1" aria-hidden="true">#</a></h3><p>下面是一个使用Python实现HTTP/2服务器推送的示例代码：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">server</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> socketserver</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">PORT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Handler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">server</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">SimpleHTTPRequestHandler</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyHandler</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Handler</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">do_GET</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">path</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;"># 发送HTML页面</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send_response</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send_header</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end_headers</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rb</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">wfile</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;"># 推送JS和CSS资源</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push_resource</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/main.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">application/javascript</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push_resource</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/style.css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">super</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">do_GET</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">push_resource</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">content_type</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send_response</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push_headers</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">wfile</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">((</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-type: </span><span style="color:#F78C6C;">%s</span><span style="color:#A6ACCD;">\\r\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">%</span><span style="color:#82AAFF;"> content_type</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">encode</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end_headers</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">path</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rb</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">wfile</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre></div><p>上述代码中，我们创建了一个自定义的Handler类，重写了do_GET方法。在处理根路径请求时，我们先发送HTML页面，然后使用push_resource方法推送JS和CSS资源。push_resource方法会发送一个200响应，然后调用push_headers方法发送推送相关的HTTP头信息，最后发送JS或CSS资源内容。</p><p>使用上述代码启动一个HTTP/2服务器后，当浏览器请求根路径时，服务器会先发送HTML页面，然后推送JS和CSS资源。如果浏览器支持HTTP/2并启用了服务器推送功能，它就会在收到HTML页面时同时收到JS和CSS资源，从而提高页面加载速度。</p><h2 id="http2-服务器推送-vs-sse" tabindex="-1">http2 服务器推送 vs SSE <a class="header-anchor" href="#http2-服务器推送-vs-sse" aria-hidden="true">#</a></h2><p>HTTP/2服务器推送和SSE（Server-Sent Events）的服务端推送都是用于提高性能和响应时间的技术，但它们有一些区别：</p><ol><li><p>协议不同：HTTP/2服务器推送是基于HTTP/2协议的，而SSE是基于HTTP/1.1协议的。</p></li><li><p>推送方式不同：HTTP/2服务器推送是通过推送帧将资源推送到客户端，而SSE是通过HTTP长连接在服务端和客户端之间传递数据。</p></li><li><p>推送对象不同：HTTP/2服务器推送可以推送任何类型的资源，包括HTML、CSS、JavaScript、图片等，而SSE主要用于推送文本数据，如JSON、XML等。</p></li><li><p>客户端支持不同：HTTP/2服务器推送需要客户端支持HTTP/2协议，而SSE可以在任何支持HTTP/1.1协议的浏览器中使用。</p></li><li><p>安全性不同：HTTP/2服务器推送可以使用TLS加密保证数据传输的安全性，而SSE没有内置的安全性保护措施，需要开发者自己实现。</p></li></ol><p>综上所述，HTTP/2服务器推送和SSE的服务端推送有各自的优势和适用场景，开发者需要根据实际情况选择合适的技术来实现服务端推送。</p><h2 id="控流" tabindex="-1">控流 <a class="header-anchor" href="#控流" aria-hidden="true">#</a></h2><p>HTTP/2的控流机制是通过流控制和窗口控制来实现的。流控制是为了防止某个流占用过多的带宽，窗口控制是为了防止整个连接占用过多的带宽。</p><p>流控制是在每个流上进行的，每个流都有一个流控制窗口，用于控制发送方发送数据的速度。接收方会在收到数据后发送WINDOW_UPDATE帧来告诉发送方可以继续发送数据。发送方会根据接收方返回的窗口大小和流控制窗口大小来决定发送数据的大小。</p><p>窗口控制是在整个连接上进行的，每个端点都有一个连接窗口。连接窗口的大小是由SETTINGS_INITIAL_WINDOW_SIZE设置的。发送方会根据连接窗口大小和每个流的流控制窗口大小来决定发送数据的大小。接收方会在收到数据后发送WINDOW_UPDATE帧来告诉发送方可以继续发送数据。</p><h3 id="java-2" tabindex="-1">java <a class="header-anchor" href="#java-2" aria-hidden="true">#</a></h3><p>在Java中，可以使用Netty框架来实现HTTP/2流量控制。下面是一个示例代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建HTTP/2连接</span></span>
<span class="line"><span style="color:#C792EA;">Http2Connection</span><span style="color:#A6ACCD;"> connection </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultHttp2Connection</span><span style="color:#89DDFF;">(true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建HTTP/2流量控制器</span></span>
<span class="line"><span style="color:#C792EA;">Http2RemoteFlowController</span><span style="color:#A6ACCD;"> remoteFlowController </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultHttp2RemoteFlowController</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">connection</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建HTTP/2流</span></span>
<span class="line"><span style="color:#C792EA;">Http2Stream</span><span style="color:#A6ACCD;"> stream </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> connection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">local</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">createStream</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取流控制窗口大小</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> initialWindowSize </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> remoteFlowController</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">initialWindowSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 更新流控制窗口大小</span></span>
<span class="line"><span style="color:#A6ACCD;">remoteFlowController</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">incrementWindowSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 发送数据到流</span></span>
<span class="line"><span style="color:#C792EA;">ByteBuf</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Unpooled</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">copiedBuffer</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> CharsetUtil</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UTF_8</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">remoteFlowController</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendFlowControlled</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readableBytes</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ChannelPromiseAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DefaultChannelPromise</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">channel</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> ImmediateEventExecutor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">INSTANCE</span><span style="color:#89DDFF;">)));</span></span>
<span class="line"></span></code></pre></div><p>在这个示例中，我们首先创建了一个HTTP/2连接和一个流量控制器。然后我们创建了一个HTTP/2流，并获取了其初始流控制窗口大小。接下来，我们使用<code>incrementWindowSize</code>方法来增加流控制窗口的大小，然后使用<code>sendFlowControlled</code>方法将数据发送到流中。</p><p>需要注意的是，在实际应用中，我们需要根据实际情况动态地调整流控制窗口的大小，以避免某些流占用过多的带宽，导致其他流的传输速度变慢。</p><h3 id="kotlin-2" tabindex="-1">kotlin <a class="header-anchor" href="#kotlin-2" aria-hidden="true">#</a></h3><p>下面是使用Kotlin OkHttp库实现HTTP/2控流的示例代码：</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> client </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OkHttpClient</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">protocols</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">listOf</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Protocol</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">HTTP_2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Protocol</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">HTTP_1_1</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">build</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> request </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://example.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">build</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> call </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">newCall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enqueue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Callback</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onFailure</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IOException</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Handle</span><span style="color:#A6ACCD;"> failure</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onResponse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Handle</span><span style="color:#A6ACCD;"> response</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onHeaders</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Headers</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Handle</span><span style="color:#A6ACCD;"> headers</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    override fun onStream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Stream</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Handle</span><span style="color:#A6ACCD;"> stream</span></span>
<span class="line"><span style="color:#A6ACCD;">        val source </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> stream</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Buffer</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exhausted</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">val</span><span style="color:#F07178;"> bytesToRead </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> minOf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">source</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">windowSize</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">toInt</span><span style="color:#89DDFF;">(),</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8192</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">val</span><span style="color:#F07178;"> bytesRead </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> source</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">read</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">buffer</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> bytesToRead</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">toLong</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bytesRead </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1L</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            stream</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">windowUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bytesRead</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">toInt</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">// Process buffer</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>在上面的代码中，我们创建了一个OkHttpClient实例，设置了支持HTTP/2协议。然后创建一个Request对象并发送异步请求。在回调函数中，我们可以处理请求的响应、头信息、流信息。在处理流信息的回调函数中，我们使用stream.source()获取数据源，然后使用source.windowSize()获取流控制窗口大小。我们使用minOf(source.windowSize.toInt(), 8192)获取每次读取数据的大小，然后使用source.read(buffer, bytesToRead.toLong())读取数据。如果读取到了数据，我们使用stream.windowUpdate(bytesRead.toInt())告诉发送方可以继续发送数据。最后，我们可以处理读取到的数据。</p><h3 id="python-2" tabindex="-1">python <a class="header-anchor" href="#python-2" aria-hidden="true">#</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> socket</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 定义连接参数</span></span>
<span class="line"><span style="color:#A6ACCD;">HOST </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">www.example.com</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">PORT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">443</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 创建socket连接</span></span>
<span class="line"><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> socket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">socket</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">socket</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> socket</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">SOCK_STREAM</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">((</span><span style="color:#82AAFF;">HOST</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> PORT</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 发送HTTP/2请求</span></span>
<span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendall</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">PRI * HTTP/2.0</span><span style="color:#A6ACCD;">\\r\\n\\r\\n</span><span style="color:#C3E88D;">SM</span><span style="color:#A6ACCD;">\\r\\n\\r\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendall</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x00\\x00\\x12\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 发送SETTINGS帧，设置连接的初始窗口大小</span></span>
<span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendall</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x00\\x00\\x06\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 发送HEADERS帧，请求网站首页</span></span>
<span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendall</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x00\\x00\\x0c\\x01\\x05\\x00\\x00\\x00\\x01\\x82\\x87\\x85\\x41\\x8b\\x08\\x05\\x3d\\x3f\\x0d\\x0a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 发送DATA帧，请求网站首页</span></span>
<span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendall</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x00\\x00\\x0f\\x00\\x01\\x00\\x00\\x00\\x01</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 发送WINDOW_UPDATE帧，更新连接的窗口大小</span></span>
<span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendall</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x00\\x00\\x04\\x08\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x64</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 发送WINDOW_UPDATE帧，更新流的窗口大小</span></span>
<span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendall</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x00\\x00\\x04\\x08\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x64</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 接收HTTP/2响应</span></span>
<span class="line"><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 关闭socket连接</span></span>
<span class="line"><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><p>以上示例中，我们在发送数据之前，使用了WINDOW_UPDATE帧来更新连接和流的窗口大小。在这个例子中，我们将连接和流的窗口大小都设置为100，表示接收方可以接收100字节的数据。如果发送方发送的数据超过了窗口大小，就需要等待接收方更新窗口大小。这样就可以避免发送方发送过多的数据，导致接收方无法处理。</p>`,63),e=[o];function t(c,r,D,F,y,C){return a(),n("div",null,e)}const E=s(p,[["render",t]]);export{i as __pageData,E as default};
