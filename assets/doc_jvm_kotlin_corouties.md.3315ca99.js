import{_ as s,c as n,o as a,b as o}from"./app.ca3d1a9e.js";const u=JSON.parse('{"title":"Coroutines in Kotlin","description":"","frontmatter":{},"headers":[],"relativePath":"doc/jvm/kotlin_corouties.md","lastUpdated":1682596082000}'),l={name:"doc/jvm/kotlin_corouties.md"},p=o(`<h1 id="coroutines-in-kotlin" tabindex="-1">Coroutines in Kotlin <a class="header-anchor" href="#coroutines-in-kotlin" aria-hidden="true">#</a></h1><p>Coroutines are a concurrency design pattern that you can use in Kotlin to simplify code that executes asynchronously. They were added to Kotlin in version 1.3 and are based on established concepts from other languages. In this article, we will explore the basics of coroutines in Kotlin and some advanced concepts that you can use to write more efficient and scalable code.</p><h2 id="basics-of-coroutines-in-kotlin" tabindex="-1">Basics of Coroutines in Kotlin <a class="header-anchor" href="#basics-of-coroutines-in-kotlin" aria-hidden="true">#</a></h2><p>Coroutines are instances of suspendable computations that can be used to perform long-running tasks without blocking the main thread. They are similar to threads, but they are much cheaper to create and use. Here is an example of how to create a coroutine in Kotlin:</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">kotlinx.coroutines.*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">GlobalScope</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">launch </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// coroutine code</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>In this example, we are using the <code>GlobalScope.launch</code> function to create a new coroutine. The code inside the coroutine will be executed asynchronously, allowing the main thread to continue executing other code.</p><h2 id="advanced-concepts-in-coroutines" tabindex="-1">Advanced Concepts in Coroutines <a class="header-anchor" href="#advanced-concepts-in-coroutines" aria-hidden="true">#</a></h2><p>Some advanced coroutine concepts in Kotlin include concurrency and actors, which provide possibilities for asynchronous programming.</p><h2 id="concurrency-and-actors" tabindex="-1">Concurrency and Actors <a class="header-anchor" href="#concurrency-and-actors" aria-hidden="true">#</a></h2><p>Concurrency is the ability of a program to perform multiple tasks at the same time. In Kotlin, coroutines provide a simple and efficient way to achieve concurrency. Here is an example of how to use coroutines to perform concurrent tasks:</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">kotlinx.coroutines.*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">GlobalScope</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">launch </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">val</span><span style="color:#F07178;"> result1 </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> async </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> task1</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">val</span><span style="color:#F07178;"> result2 </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> async </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> task2</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Result 1: </span><span style="color:#89DDFF;">\${</span><span style="color:#C3E88D;">result1</span><span style="color:#89DDFF;">.</span><span style="color:#C3E88D;">await</span><span style="color:#89DDFF;">()}&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Result 2: </span><span style="color:#89DDFF;">\${</span><span style="color:#C3E88D;">result2</span><span style="color:#89DDFF;">.</span><span style="color:#C3E88D;">await</span><span style="color:#89DDFF;">()}&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">suspend</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">task1</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    delay</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Task 1 completed</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">suspend</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">task2</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    delay</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Task 2 completed</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>In this example, we are using the <code>async</code> function to perform two tasks concurrently. The <code>await</code> function is used to wait for the results of each task before printing them to the console.</p><p>Actors are a higher-level abstraction that can be used to manage state in concurrent programs. They provide a way to encapsulate state and behavior in a single object, making it easier to reason about concurrent programs. Here is an example of how to use actors in Kotlin:</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">kotlinx.coroutines.*</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">kotlinx.coroutines.channels.*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">sealed</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CounterMsg</span></span>
<span class="line"><span style="color:#C792EA;">object</span><span style="color:#A6ACCD;"> IncCounter </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CounterMsg</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetCounter</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CompletableDeferred</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Int</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CounterMsg</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fun</span><span style="color:#A6ACCD;"> CoroutineScope.</span><span style="color:#82AAFF;">counterActor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> actor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CounterMsg</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> counter </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">msg </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">when</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">is</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">IncCounter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> counter</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">is</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">GetCounter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> msg</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">response</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">complete</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">counter</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> runBlocking </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">val</span><span style="color:#F07178;"> counter </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> counterActor</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#F07178;">    withContext</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Dispatchers</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Default</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        repeat</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            counter</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">send</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IncCounter</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">val</span><span style="color:#F07178;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">CompletableDeferred</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Int</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#F07178;">    counter</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">send</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">GetCounter</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">response</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Counter = </span><span style="color:#89DDFF;">\${</span><span style="color:#C3E88D;">response</span><span style="color:#89DDFF;">.</span><span style="color:#C3E88D;">await</span><span style="color:#89DDFF;">()}&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    counter</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>In this example, we are using an actor to manage a counter. The <code>IncCounter</code> message is used to increment the counter, and the <code>GetCounter</code> message is used to retrieve the current value of the counter. The <code>CompletableDeferred</code> class is used to wait for the response from the actor.</p>`,15),e=[p];function t(c,r,F,y,i,D){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{u as __pageData,d as default};
