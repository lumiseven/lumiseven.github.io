import{_ as s,c as a,o as n,b as o}from"./app.d2b42a5e.js";const l="/assets/uuid_1.drawio.a1d59746.png",d=JSON.parse('{"title":"从DBA的角度聊聊UUID的利与弊","description":"","frontmatter":{},"headers":[],"relativePath":"doc/rdb/uuid.md","lastUpdated":1696577466000}'),p={name:"doc/rdb/uuid.md"},e=o('<h1 id="从dba的角度聊聊uuid的利与弊" tabindex="-1">从DBA的角度聊聊UUID的利与弊 <a class="header-anchor" href="#从dba的角度聊聊uuid的利与弊" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>UUID，想必诸位都已耳熟能详，此文旧饭新炒一下，从DBA的角度聊聊UUID在PostgreSQL中的利与弊。</p><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-hidden="true">#</a></h2><p>UUID即&quot;通用唯一标识符&quot;，用于生成一个唯一的标识符，类似于我们的身份证号</p><p>以 <code>a25c407e-a9d1-4cf7-b588-fda24e77f7e3</code> 举例：</p><p><img src="'+l+`" alt="uuid_1"></p><p>具体算法以及各个版本的差异此处表过不提。在PostgreSQL中，低版本可以用&quot;uuid-ossp&quot;或者pgcrypto插件，13以后原生就提供了 gen_random_uuid() 函数用于获取UUID (v4版本)。那么细分到PostgreSQL数据库中，从DBA以及可维护性角度来分析的话，UUID是否推崇？作为替代，序列/bigint之类是否可行？我大致列了三点危害：<strong>WAL膨胀</strong>、<strong>索引膨胀</strong>、<strong>性能损失</strong>。</p><h2 id="wal的膨胀" tabindex="-1">WAL的膨胀 <a class="header-anchor" href="#wal的膨胀" aria-hidden="true">#</a></h2><p>这一点我写在了最前面，是因为这个危害带来的影响最为可观，并且最为常见。UUID因其自身的无序性和唯一性，选择率很低，因此往往都会在相应列上创建索引，用于加快检索，而WAL膨胀的原理——FPI也正是因为索引的存在，页面的首次变更要记录FPI。假如是序列，由于数据是顺序生成的，因此每次涉及到一个页面的变更</p><p>假如是UUID，由于数据的无序性，会导致索引叶子节点频繁分裂、合并，致使WAL的膨胀</p><p>这个危害是最常见的，我碰到过无数案例都是UUID主键索引导致的，诸如copy导入慢如牛马、主备延迟巨大、存储急剧上升等等。</p><h2 id="索引膨胀" tabindex="-1">索引膨胀 <a class="header-anchor" href="#索引膨胀" aria-hidden="true">#</a></h2><p>索引膨胀和WAL膨胀类似，由于索引叶子页面频繁分裂、合并，会导致大量的空洞、碎片，可以通过查询pgstattuple.leaf_fragmentation作为索引膨胀的依据，不仅导致索引效率的降低，还会降低性能。</p><h2 id="性能损失" tabindex="-1">性能损失 <a class="header-anchor" href="#性能损失" aria-hidden="true">#</a></h2><p>性能损失这个gap其实大多数人也能想到，UUID的字节更大，产生UUID的开销也往往更高，同时序列也对高并发生成的场景做了大量优化(cache)，👇🏻可以看到二者的一个产生效率</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">postgres</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"># </span><span style="color:#F78C6C;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">sequence</span><span style="color:#A6ACCD;"> test_seq;</span></span>
<span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">SEQUENCE</span></span>
<span class="line"><span style="color:#A6ACCD;">postgres</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"># explain analyze </span><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> nextval(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test_seq</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generate_series</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">,10e6);</span></span>
<span class="line"><span style="color:#A6ACCD;">                                                          QUERY PLAN                                                           </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">-------------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">Function</span><span style="color:#A6ACCD;"> Scan </span><span style="color:#F78C6C;">on</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generate_series</span><span style="color:#A6ACCD;">  (cost</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">00</span><span style="color:#A6ACCD;">..</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">50</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">) (actual </span><span style="color:#C792EA;">time</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2631</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">336</span><span style="color:#A6ACCD;">..</span><span style="color:#F78C6C;">9060</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">781</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10000000</span><span style="color:#A6ACCD;"> loops</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> Planning </span><span style="color:#C792EA;">Time</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">081</span><span style="color:#A6ACCD;"> ms</span></span>
<span class="line"><span style="color:#A6ACCD;"> Execution </span><span style="color:#C792EA;">Time</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">9551</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">244</span><span style="color:#A6ACCD;"> ms</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">postgres</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"># explain analyze </span><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> gen_random_uuid</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generate_series</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">,10e6);</span></span>
<span class="line"><span style="color:#A6ACCD;">                                                           QUERY PLAN                                                            </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">---------------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">Function</span><span style="color:#A6ACCD;"> Scan </span><span style="color:#F78C6C;">on</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generate_series</span><span style="color:#A6ACCD;">  (cost</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">00</span><span style="color:#A6ACCD;">..</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">50</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">) (actual </span><span style="color:#C792EA;">time</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2590</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">397</span><span style="color:#A6ACCD;">..</span><span style="color:#F78C6C;">27123</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">855</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10000000</span><span style="color:#A6ACCD;"> loops</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> Planning </span><span style="color:#C792EA;">Time</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">062</span><span style="color:#A6ACCD;"> ms</span></span>
<span class="line"><span style="color:#A6ACCD;"> Execution </span><span style="color:#C792EA;">Time</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">27814</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">464</span><span style="color:#A6ACCD;"> ms</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>另外一个是cybertech的例子，都是一千万行数据，一个是序列，一个是UUID，性能差了一倍。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">locality</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"># EXPLAIN (BUFFERS, ANALYZE, TIMING </span><span style="color:#F78C6C;">OFF</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(id) </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> records;   </span><span style="color:#676E95;font-style:italic;">---序列，顺序产生</span></span>
<span class="line"><span style="color:#A6ACCD;">                                                             QUERY PLAN                                                             </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">------------------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">Aggregate</span><span style="color:#A6ACCD;">  (cost</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">202422</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">47</span><span style="color:#A6ACCD;">..</span><span style="color:#F78C6C;">202422</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">48</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">) (actual </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> loops</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">   Buffers: shared hit</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">27332</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">Index</span><span style="color:#A6ACCD;"> Only Scan </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> records_id_idx </span><span style="color:#F78C6C;">on</span><span style="color:#A6ACCD;"> records  (cost</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">43</span><span style="color:#A6ACCD;">..</span><span style="color:#F78C6C;">177422</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">46</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10000002</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">) (actual </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10000000</span><span style="color:#A6ACCD;"> loops</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">         Heap Fetches: </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">         Buffers: shared hit</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">27332</span></span>
<span class="line"><span style="color:#A6ACCD;"> Planning </span><span style="color:#C792EA;">Time</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">056</span><span style="color:#A6ACCD;"> ms</span></span>
<span class="line"><span style="color:#A6ACCD;"> Execution </span><span style="color:#C792EA;">Time</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">777</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">764</span><span style="color:#A6ACCD;"> ms</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">locality</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"># EXPLAIN (BUFFERS, ANALYZE, TIMING </span><span style="color:#F78C6C;">OFF</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COUNT</span><span style="color:#A6ACCD;">(uuid_v4) </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> records;  </span><span style="color:#676E95;font-style:italic;">---UUID</span></span>
<span class="line"><span style="color:#A6ACCD;">                                                                QUERY PLAN                                                                </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">------------------------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">Aggregate</span><span style="color:#A6ACCD;">  (cost</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">213506</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">47</span><span style="color:#A6ACCD;">..</span><span style="color:#F78C6C;">213506</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">48</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">) (actual </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> loops</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">   Buffers: shared hit</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">8562960</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">Index</span><span style="color:#A6ACCD;"> Only Scan </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> records_uuid_v4_idx </span><span style="color:#F78C6C;">on</span><span style="color:#A6ACCD;"> records  (cost</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">43</span><span style="color:#A6ACCD;">..</span><span style="color:#F78C6C;">188506</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">46</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10000002</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">) (actual </span><span style="color:#F78C6C;">rows</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10000000</span><span style="color:#A6ACCD;"> loops</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">         Heap Fetches: </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">         Buffers: shared hit</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">8562960</span></span>
<span class="line"><span style="color:#A6ACCD;"> Planning </span><span style="color:#C792EA;">Time</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">058</span><span style="color:#A6ACCD;"> ms</span></span>
<span class="line"><span style="color:#A6ACCD;"> Execution </span><span style="color:#C792EA;">Time</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">1430</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">684</span><span style="color:#A6ACCD;"> ms</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">rows</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>差异很明显，shared hit是数量级的差异。当执行index only scan的时候，需要去检索visibility map，一个8KB页面用2bit标记all_visible，因此每个vm页面可以缓存32768个页面，也就是256MB大小的表，因此对于序列（第一条SQL），通过索引判断元组可见性的时候，由于堆表中值也是相邻的，因此一个vm页面就可以一次性判断N条索引中元组的可见性，而UUID，由于自身值的无序性与唯一性，<strong>索引中相邻的值在堆表页面中往往都是分散的</strong>，因此需要涉及到大量的vm页面扫描与置换，注意缓存命中并非意味着没有成本（获取锁、哈希表查找等一系列步骤），因此这也是一个潜在的性能损失点。</p><blockquote><p>The answer is that because looking up pages in shared buffers is not free – it involves grabbing a lock, running a hash table lookup on a relatively large hash table, and doing a memory write to mark the pages as being looked at – index-only scan will hang onto a reference to the visibility map page it had to look at last time, and if the next index tuple happens to need the same page, we can skip all that work, and just read the bit we need off of it. Some of you might see where this is going… 答案是，因为在共享缓冲区中查找页面不是免费的——它涉及到获取锁，在相对较大的哈希表上运行哈希表查找，并进行内存写入以将页面标记为正在查看——index only scan 将挂起对上次必须查看的可见性映射页面的引用，如果下一条索引元组碰巧需要同一页面，我们可以跳过所有这些工作，只读取我们需要的部分。</p></blockquote><p>另外由于著名的局部性原理（Locality），在计算机科学领域中应用程序在访问内存的时候，倾向于访问内存中较为靠近的值。局部性是出现在计算机系统中的一种可预测行为。系统的这种强访问局部性，可以被用来在处理器内核的指令流水线中进行性能优化，如缓存，内存预读取以及分支预测，UUID也会使局部性原理大打折扣。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h2><p><strong>当然这篇文章最开始就声明了是站在DBA的角度来看待UUID</strong>，并非全盘否定UUID，比如UUID对安全就有好处（可以根据序列推断你大致的数据顺序），另外由于序列自身的诸多黑洞（序列空洞、孤儿序列等），还有在分片模式下序列也不行（雪花算法、百度uid-generator等），UUID自然就成为了一个更好的选择，或者你的主键并非由数据库生成而是应用程序，UUID也更适合，因此我们要辩证地看待。我在写开发规范的时候，也写明了推荐使用序列作为替代。</p><p>另外一个有趣的点是，<strong>Oracle和PostgreSQL的行为相反</strong>：</p><blockquote><p>Oracle中推荐使用<code>sys_guid</code>，虽然也会有索引分裂、写放大这些问题，但是热块的问题更加严重，因此作为折中还是选择了<code>sys_guid</code></p></blockquote><p>为了规避前文所说的问题，也可以选择使用有序UUID：<a href="https://github.com/tvondra/sequential-uuids%EF%BC%8C%E4%BB%A5%E5%8F%8AUUID" target="_blank" rel="noreferrer">https://github.com/tvondra/sequential-uuids，以及UUID</a> v7，v6 和 v7 ( <a href="https://github.com/fboulnois/pg_uuidv7%E6%8F%90%E4%BE%9B%E4%BA%86v7%E7%9A%84%E6%94%AF%E6%8C%81" target="_blank" rel="noreferrer">https://github.com/fboulnois/pg_uuidv7提供了v7的支持</a> ) 都有考虑可排序性，解决 UUID 应用时最常遇到的数据库性能问题。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><a href="https://www.reddit.com/r/PostgreSQL/comments/mi78aq/any_significant_performance_disadvantage_to_using/" target="_blank" rel="noreferrer">https://www.reddit.com/r/PostgreSQL/comments/mi78aq/any_significant_performance_disadvantage_to_using/</a></p><p><a href="https://www.cybertec-postgresql.com/en/unexpected-downsides-of-uuid-keys-in-postgresql/" target="_blank" rel="noreferrer">https://www.cybertec-postgresql.com/en/unexpected-downsides-of-uuid-keys-in-postgresql/</a></p>`,30),t=[e];function C(r,c,y,A,D,i){return n(),a("div",null,t)}const h=s(p,[["render",C]]);export{d as __pageData,h as default};
