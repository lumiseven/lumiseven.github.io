import{_ as s,c as a,o as l,b as n}from"./app.c314d56e.js";const C=JSON.parse('{"title":"redis bigKeys","description":"","frontmatter":{},"headers":[],"relativePath":"doc/redis/bigkeys.md","lastUpdated":1696574864000}'),p={name:"doc/redis/bigkeys.md"},o=n(`<h1 id="redis-bigkeys" tabindex="-1">redis bigKeys <a class="header-anchor" href="#redis-bigkeys" aria-hidden="true">#</a></h1><h2 id="什么是-redis-大-key" tabindex="-1">什么是 Redis 大 key <a class="header-anchor" href="#什么是-redis-大-key" aria-hidden="true">#</a></h2><p>大 key 并不是指 key 的值很大，而是 key 对应的 value 很大。</p><p>一般而言，下面这两种情况被称为大 key：</p><ul><li>String 类型的值大于 10 KB；</li><li>Hash、List、Set、ZSet 类型的元素的个数超过 5000个；</li></ul><h2 id="大-key-会造成什么问题" tabindex="-1">大 key 会造成什么问题 <a class="header-anchor" href="#大-key-会造成什么问题" aria-hidden="true">#</a></h2><p>大 key 会带来以下四种影响：</p><ul><li>客户端超时阻塞。由于 Redis 执行命令是单线程处理，然后在操作大 key 时会比较耗时，那么就会阻塞 Redis，从客户端这一视角看，就是很久很久都没有响应。</li><li>引发网络阻塞。每次获取大 key 产生的网络流量较大，如果一个 key 的大小是 1 MB，每秒访问量为 1000，那么每秒会产生 1000MB 的流量，这对于普通千兆网卡的服务器来说是灾难性的。</li><li>阻塞工作线程。如果使用 del 删除大 key 时，会阻塞工作线程，这样就没办法处理后续的命令。</li><li>内存分布不均。集群模型在 slot 分片均匀情况下，会出现数据和查询倾斜情况，部分有大 key 的 Redis 节点占用内存多，QPS 也会比较大。</li></ul><h2 id="如何找到大-key" tabindex="-1">如何找到大 key <a class="header-anchor" href="#如何找到大-key" aria-hidden="true">#</a></h2><ol><li><p><code>redis-cli --bigkeys</code> 查找大key 可以通过 redis-cli --bigkeys 命令查找大 key：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">redis-cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-h</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">127.0.0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p6379</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bigkeys</span></span>
<span class="line"></span></code></pre></div><p>注意事项：</p><ul><li>最好选择在从节点上执行该命令。因为主节点上执行时，会阻塞主节点；</li><li>如果没有从节点，那么可以选择在 Redis 实例业务压力的低峰阶段进行扫描查询，以免影响到实例的正常运行；或者可以使用 -i 参数控制扫描间隔，避免长时间扫描降低 Redis 实例的性能。</li></ul><p>不足之处：</p><ul><li>这个方法只能返回每种类型中最大的那个 bigkey，无法得到大小排在前 N 位的 bigkey；</li><li>对于集合类型来说，这个方法只统计集合元素个数的多少，而不是实际占用的内存量。但是，一个集合中的元素个数多，并不一定占用的内存就多。因为，有可能每个元素占用的内存很小，这样的话，即使元素个数有很多，总内存开销也不大；</li></ul></li><li><p>使用 SCAN 命令查找大 key 使用 SCAN 命令对数据库扫描，然后用 TYPE 命令获取返回的每一个 key 的类型。</p><p>对于 String 类型，可以直接使用 STRLEN 命令获取字符串的长度，也就是占用的内存空间字节数。</p><p>对于集合类型来说，有两种方法可以获得它占用的内存大小：</p><ul><li>如果能够预先从业务层知道集合元素的平均大小，那么，可以使用下面的命令获取集合元素的个数，然后乘以集合元素的平均大小，这样就能获得集合占用的内存大小了。<code>List 类型：LLEN 命令</code>；<code>Hash 类型：HLEN 命令</code>；<code>Set 类型：SCARD 命令</code>；<code>Sorted Set 类型：ZCARD 命令</code>；</li><li>如果不能提前知道写入集合的元素大小，可以使用 <code>MEMORY USAGE</code> 命令（需要 Redis 4.0 及以上版本），查询一个键值对占用的内存空间。</li></ul></li><li><p>使用 RdbTools 工具查找大 key 使用 RdbTools 第三方开源工具，可以用来解析 Redis 快照（RDB）文件，找到其中的大 key。 比如，下面这条命令，将大于 10 kb 的 key 输出到一个表格文件。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">rdb</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dump.rdb</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">memory</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--bytes</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10240</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis.csv</span></span>
<span class="line"></span></code></pre></div></li></ol><h2 id="如何删除大-key" tabindex="-1">如何删除大 key <a class="header-anchor" href="#如何删除大-key" aria-hidden="true">#</a></h2><p>删除操作的本质是要释放键值对占用的内存空间，不要小瞧内存的释放过程。</p><p>释放内存只是第一步，为了更加高效地管理内存空间，在应用程序释放内存时，操作系统需要把释放掉的内存块插入一个空闲内存块的链表，以便后续进行管理和再分配。这个过程本身需要一定时间，而且会阻塞当前释放内存的应用程序。</p><p>所以，如果一下子释放了大量内存，空闲内存块链表操作时间就会增加，相应地就会造成 Redis 主线程的阻塞，如果主线程发生了阻塞，其他所有请求可能都会超时，超时越来越多，会造成 Redis 连接耗尽，产生各种异常。</p><p>因此，删除大 key 这一个动作，我们要小心。具体要怎么做呢？这里给出两种方法：</p><ul><li>分批次删除</li><li>异步删除（Redis 4.0版本以上）</li></ul><ol><li><p>分批次删除 对于删除大 Hash，使用 <code>hscan</code> 命令，每次获取 100 个字段，再用 <code>hdel</code> 命令，每次删除 1 个字段。 e.g.:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">del_large_hash</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> redis</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">StrictRedis</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">host</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">redis-host1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">port</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    large_hash_key </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#要删除的大hash键名</span></span>
<span class="line"><span style="color:#A6ACCD;">    cursor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> cursor </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># 使用 hscan 命令，每次获取 100 个字段</span></span>
<span class="line"><span style="color:#A6ACCD;">        cursor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hscan</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">large_hash_key</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">cursor</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">cursor</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">count</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> item </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">items</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;"># 再用 hdel 命令，每次删除1个字段</span></span>
<span class="line"><span style="color:#A6ACCD;">                r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hdel</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">large_hash_key</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> item</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">])</span></span>
<span class="line"></span></code></pre></div><p>对于删除大 List，通过 <code>ltrim</code> 命令，每次删除少量元素。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">del_large_list</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> redis</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">StrictRedis</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">host</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">redis-host1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">port</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">large_list_key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#要删除的大list的键名</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">llen</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">large_list_key</span><span style="color:#89DDFF;">)&gt;</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">#每次只删除最右100个元素</span></span>
<span class="line"><span style="color:#A6ACCD;">    r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ltrim</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">large_list_key</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">101</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>对于删除大 Set，使用 <code>sscan</code> 命令，每次扫描集合中 100 个元素，再用 <code>srem</code> 命令每次删除一个键。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">del_large_set</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> redis</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">StrictRedis</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">host</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">redis-host1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">port</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">large_set_key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># 要删除的大set的键名</span></span>
<span class="line"><span style="color:#A6ACCD;">cursor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> cursor </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 使用 sscan 命令，每次扫描集合中 100 个元素</span></span>
<span class="line"><span style="color:#A6ACCD;">    cursor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sscan</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">large_set_key</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">cursor</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">cursor</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">count</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> item </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 再用 srem 命令每次删除一个键</span></span>
<span class="line"><span style="color:#A6ACCD;">    r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">srem</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">large_size_key</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> item</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>对于删除大 ZSet，使用 <code>zremrangebyrank</code> 命令，每次删除 top 100个元素。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">del_large_sortedset</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> redis</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">StrictRedis</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">host</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">large_sortedset_key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">port</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">large_sortedset_key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">zcard</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">large_sortedset_key</span><span style="color:#89DDFF;">)&gt;</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 使用 zremrangebyrank 命令，每次删除 top 100个元素</span></span>
<span class="line"><span style="color:#A6ACCD;">    r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">zremrangebyrank</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">large_sortedset_key</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div></li><li><p>异步删除 从 Redis 4.0 版本开始，可以采用异步删除法，用 <code>unlink</code> 命令代替 <code>del</code> 来删除。</p><p>这样 Redis 会将这个 key 放入到一个异步线程中进行删除，这样不会阻塞主线程。</p></li></ol>`,17),e=[o];function t(c,r,y,D,F,i){return l(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
