import{_ as s,c as n,o as a,b as l}from"./app.c1ff4fc5.js";const F=JSON.parse('{"title":"Nginx","description":"","frontmatter":{},"headers":[],"relativePath":"doc/nginx/nginx.md","lastUpdated":1683013802000}'),p={name:"doc/nginx/nginx.md"},o=l(`<h1 id="nginx" tabindex="-1"><a href="https://nginx.org/en/" target="_blank" rel="noreferrer">Nginx</a> <a class="header-anchor" href="#nginx" aria-hidden="true">#</a></h1><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-hidden="true">#</a></h2><ol><li><p>什么是Nginx Nginx是一个 轻量级/高性能的反向代理Web服务器,他实现非常高效的反向代理、负载平衡,他可以处理2-3万并发连接数,官方监测能支持5万并发</p></li><li><p>为什么要用Nginx</p><ul><li>跨平台、配置简单、方向代理、高并发连接:处理2-3万并发连接数,官方监测能支持5万并发,</li><li>内存消耗小:开启10个nginx才占150M内存 ,nginx处理静态文件好,耗费内存少,</li><li>且Nginx内置的健康检查功能:如果有一个服务器宕机,会做一个健康检查,再发送的请求就不会发送到宕机的服务器了。重新将请求提交到其他的节点上。</li><li>节省宽带:支持GZIP压缩,可以添加浏览器本地缓存</li><li>稳定性高:宕机的概率非常小</li><li>接收用户请求是异步的</li></ul></li><li><p>为什么Nginx性能这么高</p><ul><li>事件处理机制: <code>异步非阻塞事件处理机制:运用了epoll模型</code>,提供了一个队列,排队解决</li></ul></li><li><p>Nginx怎么处理请求</p><ul><li>nginx接收一个请求后,首先由listen和server_name指令匹配server模块,再匹配server模块里的location,location就是实际地址</li></ul><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">server</span><span style="color:#A6ACCD;"> {</span><span style="color:#676E95;font-style:italic;"># 第一个Server区块开始,表示一个独立的虚拟主机站点</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> listen </span><span style="color:#A6ACCD;">80</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 提供服务的端口,默认80</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> server_name </span><span style="color:#A6ACCD;">localhost</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 提供服务的域名主机名</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span><span style="color:#676E95;font-style:italic;"># 第一个location区块开始</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> root </span><span style="color:#A6ACCD;">html</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 站点的根目录</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> index </span><span style="color:#A6ACCD;">index.html index.htm</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 默认的首页文件,多个用空格分开</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span><span style="color:#676E95;font-style:italic;"># 第一个location区块结束</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>正向代理和反向代理</p><ul><li>正向代理就是一个人发送一个请求<code>直接就到达了目标的服务器</code></li><li>反方代理就是请求统一被Nginx接收,nginx反向代理服务器接收到之后,按照一定的<code>规则分发给了后端</code>的业务处理服务器进行处理了</li></ul></li><li><p>Nginx的优缺点</p><ul><li>优点: <ol><li>占内存小,可实现高并发连接,处理响应快</li><li>可实现http服务器、虚拟主机、方向代理、负载均衡</li><li>配置简单</li><li>不暴露正式的服务器IP地址</li></ol></li><li>缺点: <ol><li>动态处理差(处理动态页面)</li></ol></li></ul></li><li><p>应用场景</p><ol><li>http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。</li><li>虚拟主机。可以实现在一台服务器虚拟出多个网站</li><li>反向代理,负载均衡。当网站的访问量达到一定程度后,单台服务器不能满足用户的请求时,需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载,不会应为某台服务器负载高宕机而某台服务器闲置的情况。</li><li>配置安全管理、比如可以使用Nginx搭建<code>API接口网关</code>,对每个接口服务进行拦截。</li></ol></li><li><p>Nginx目录结构</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">root@console:/etc/nginx</span><span style="color:#A6ACCD;"># tree</span></span>
<span class="line"><span style="color:#82AAFF;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">conf.d</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dhparam.pem</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fastcgi.conf</span><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;"># fastcgi相关参数的配置文件</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fastcgi_params</span><span style="color:#A6ACCD;">              </span><span style="color:#676E95;font-style:italic;"># fastcgi的参数文件</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koi-utf</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">koi-win</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mime.types</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;"># 媒体类型</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">modules-available</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">modules-enabled</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#C3E88D;">-mod-http-image-filter.conf</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/share/nginx/modules-available/mod-http-image-filter.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#C3E88D;">-mod-http-xslt-filter.conf</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/share/nginx/modules-available/mod-http-xslt-filter.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#C3E88D;">-mod-mail.conf</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/share/nginx/modules-available/mod-mail.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#C3E88D;">-mod-stream.conf</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/share/nginx/modules-available/mod-stream.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx.conf</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;"># Nginx主配置文件</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginxconfig.io</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">general.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">letsencrypt.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">proxy.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">security.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">proxy_params</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">scgi_params</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;font-style:italic;"># scgi相关参数文件</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sites-available</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;font-style:italic;"># 可用的站点配置</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">snapdrop.lumione.cloud.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sites-enabled</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;font-style:italic;"># 启用的站点配置</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">snapdrop.lumione.cloud.conf</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">../sites-available/snapdrop.lumione.cloud.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">snippets</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fastcgi-php.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">snakeoil.conf</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ssl</span><span style="color:#A6ACCD;">                         </span><span style="color:#676E95;font-style:italic;"># 证书存放目录</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">9267847_default.lumione.cloud.key</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">9267847_default.lumione.cloud.pem</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">uwsgi_params</span><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;"># uwsgi相关参数文件</span></span>
<span class="line"><span style="color:#FFCB6B;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">win-utf</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div></li><li><p>默认 nginx.conf 属性模块</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">worker_processes </span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># worker进程的数量</span></span>
<span class="line"><span style="color:#C792EA;">events</span><span style="color:#A6ACCD;"> {</span><span style="color:#676E95;font-style:italic;"># 事件区块</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> worker_connections </span><span style="color:#A6ACCD;">1024</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 每个worker进程支持的最大连接数</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#C792EA;">http</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> include </span><span style="color:#A6ACCD;">mime.types</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># Nginx支持的媒体类型库文件</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> default_type </span><span style="color:#A6ACCD;">application/octet-stream</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 默认的媒体类型</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> sendfile </span><span style="color:#A6ACCD;">on</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 开启高效传输模式</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> keepalive_timeout </span><span style="color:#A6ACCD;">65</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 连接超时</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>Nginx解决前端跨域问题</p><ul><li>使用Nginx转发请求。把跨域的接口写成调本域的接口,然后将这些接口转发到真正的请求地址。 <a href="https://serverfault.com/a/716283" target="_blank" rel="noreferrer">https://serverfault.com/a/716283</a></li></ul><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Wide-open CORS config for nginx</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request_method </span><span style="color:#89DDFF;">= </span><span style="color:#C3E88D;">&#39;OPTIONS&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;*&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Allow-Methods&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;GET, POST, OPTIONS&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;"># Custom headers and headers various browsers *should* be OK with but aren&#39;t</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Allow-Headers&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;"># Tell client that this pre-flight info is valid for 20 days</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Max-Age&#39;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1728000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Content-Type&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;text/plain; charset=utf-8&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Content-Length&#39;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">204</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request_method </span><span style="color:#89DDFF;">= </span><span style="color:#C3E88D;">&#39;POST&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;*&#39;</span><span style="color:#F07178;"> always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Allow-Methods&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;GET, POST, OPTIONS&#39;</span><span style="color:#F07178;"> always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Allow-Headers&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#39;</span><span style="color:#F07178;"> always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Expose-Headers&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;Content-Length,Content-Range&#39;</span><span style="color:#F07178;"> always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request_method </span><span style="color:#89DDFF;">= </span><span style="color:#C3E88D;">&#39;GET&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;*&#39;</span><span style="color:#F07178;"> always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Allow-Methods&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;GET, POST, OPTIONS&#39;</span><span style="color:#F07178;"> always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Allow-Headers&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#39;</span><span style="color:#F07178;"> always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> add_header </span><span style="color:#C3E88D;">&#39;Access-Control-Expose-Headers&#39;</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">&#39;Content-Length,Content-Range&#39;</span><span style="color:#F07178;"> always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>Nginx虚拟主机怎么配置</p><ul><li>基于虚拟主机配置域名<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">#当客户端访问www.example.com,监听端口号为80,直接跳转到data/www目录下文件</span></span>
<span class="line"><span style="color:#C792EA;">server</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> listen </span><span style="color:#A6ACCD;">80</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> server_name </span><span style="color:#A6ACCD;">www.example.com</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> root </span><span style="color:#A6ACCD;">data/www</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> index </span><span style="color:#A6ACCD;">index.html index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#当客户端访问www.example.com,监听端口号为80,直接跳转到data/bbs目录下文件</span></span>
<span class="line"><span style="color:#C792EA;">server</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> listen </span><span style="color:#A6ACCD;">80</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> server_name </span><span style="color:#A6ACCD;">api.example.com</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> root </span><span style="color:#A6ACCD;">data/api</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> index </span><span style="color:#A6ACCD;">index.html index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li><li>基于端口的虚拟主机 使用端口来区分,浏览器使用域名或ip地址:端口号访问<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">#当客户端访问www.example.com,监听端口号为8080,直接跳转到data/www目录下文件</span></span>
<span class="line"><span style="color:#C792EA;">server</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> listen </span><span style="color:#A6ACCD;">8080</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> server_name </span><span style="color:#A6ACCD;">8080.example.com</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> root </span><span style="color:#A6ACCD;">data/www</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> index </span><span style="color:#A6ACCD;">index.html index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#当客户端访问www.example.com,监听端口号为80直接跳转到真实ip服务器地址 127.0.0.1:8080</span></span>
<span class="line"><span style="color:#C792EA;">server</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> listen </span><span style="color:#A6ACCD;">80</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> server_name </span><span style="color:#A6ACCD;">www.example.com</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#A6ACCD;">http://127.0.0.1:8080</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> index </span><span style="color:#A6ACCD;">index.html index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p>location 作用 location指令的作用是根据用户请求的URI来执行不同的应用,也就是根据用户请求的网站URL进行匹配,匹配成功即进行相关的操作。</p><table><thead><tr><th>匹配符</th><th>规则</th><th>优先级</th></tr></thead><tbody><tr><td>=</td><td>精确匹配</td><td>1</td></tr><tr><td>^~</td><td>以某个字符串开头</td><td>2</td></tr><tr><td>~</td><td>区分大小写的正则匹配</td><td>3</td></tr><tr><td>~*</td><td>不区分大小写的正则匹配</td><td>4</td></tr><tr><td>!~</td><td>区分大小写不匹配的正则</td><td>5</td></tr><tr><td>!~*</td><td>不区分大小写不匹配的正则</td><td>6</td></tr><tr><td>/</td><td>通用匹配,任何请求都会匹配到</td><td>7</td></tr></tbody></table></li><li><p>location 示例</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">#优先级1,精确匹配,根路径</span></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">=/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">400</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#优先级2,以某个字符串开头,以av开头的,优先匹配这里,区分大小写</span></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">^~</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/av </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> root </span><span style="color:#A6ACCD;">/data/av/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#优先级3,区分大小写的正则匹配,匹配/media*****路径</span></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/media </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> alias </span><span style="color:#A6ACCD;">/data/static/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#优先级4 ,不区分大小写的正则匹配,所有的****.jpg|gif|png|js|css 都走这里</span></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.*\\.(jpg|gif|png|js|css)$ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> root </span><span style="color:#A6ACCD;">/data/av/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#优先7,通用匹配</span></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ol><h2 id="限流" tabindex="-1">限流 <a class="header-anchor" href="#限流" aria-hidden="true">#</a></h2><ol><li><p>限流怎么做</p><ul><li>3种限流 <ol><li>正常限制访问频率(正常流量)</li><li>突发限制访问频率(突发流量)</li><li>限制并发连接数</li></ol></li><li>Nginx基于漏桶流算法的限流</li></ul></li><li><p>实现三种限流算法</p><ul><li><p>正常限制访问频率(正常流量):</p><ul><li>限制一个用户发送的请求,Nginx多久接收一个请求。</li><li>Nginx中使用 <a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="noreferrer">ngx_http_limit_req_module</a> 模块来限制的访问频率,限制的原理实质是<code>基于漏桶算法</code>原理来实现的。在nginx.conf配置文件中可以使用<code>limit_req_zone</code>命令及<code>limit_req</code>命令限制单个IP的请求处理频率。</li></ul><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">#定义限流维度,一个用户一秒钟一个请求进来,多余的全部漏掉</span></span>
<span class="line"><span style="color:#89DDFF;">limit_req_zone $</span><span style="color:#A6ACCD;">binary_remote_addr zone=one:10m rate=1r/s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#绑定限流维度</span></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">location</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">/seckill.html </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> limit_req </span><span style="color:#F07178;">zone=one</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#F07178;">http://background</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    }</span></span>
<span class="line"><span style="color:#F07178;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>突发限制访问频率(突发流量):</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">#定义限流维度,一个用户一秒钟一个请求进来,多余的全部漏掉</span></span>
<span class="line"><span style="color:#89DDFF;">limit_req_zone $</span><span style="color:#A6ACCD;">binary_remote_addr zone=one:10m rate=1r/s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#绑定限流维度</span></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">location</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">/seckill.html </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> limit_req </span><span style="color:#F07178;">zone=one burst=5 nodelay</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#F07178;">http://background</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    }</span></span>
<span class="line"><span style="color:#F07178;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>配置参数 <ul><li><strong>$binary_remote_addr</strong> ：表示通过remote_addr这个标识来做限制，“binary_”的目的是缩写内存占用量，是限制同一客户端ip地址</li><li><strong>zone=one:10m</strong>：表示生成一个大小为10M，名字为one的内存区域，用来存储访问的频次信息</li><li><strong>rate=1r/s</strong>：表示允许相同标识的客户端的访问频次，这里限制的是每秒1次，即每秒只处理一个请求，还可以有比如30r/m的，即限制每2秒访问一次，即每2秒才处理一个请求。</li><li><strong>zone=one</strong> ：使用哪个配置区域来做限制，与上面 limit_req_zone 里的 name 对应</li><li><strong>burst=5</strong>：设置一个大小为5的缓冲区 当有大量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内等待，但是这个等待区里的位置只有5个，超过的请求会直接报503的错误然后返回。</li><li><strong>nodelay</strong>： <ul><li>如果设置，会在瞬时提供处理(burst + rate)个请求的能力，请求超过（burst + rate）的时候就会直接返回503，永远不存在请求需要等待的情况。（这里的rate的单位是：r/s）</li><li>如果没有设置，则所有请求会依次等待排队</li></ul></li></ul></li></ul></li><li><p>限制并发连接数 Nginx中的 <a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html" target="_blank" rel="noreferrer">ngx_http_limit_conn_module</a> 模块提供了限制并发连接数的功能,可以使用 <code>limit_conn_zone</code> 指令以及<code>limit_conn</code> 执行进行配置。</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">http</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> limit_conn_zone $</span><span style="color:#A6ACCD;">binary_remote_addr zone=myip:10m</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> limit_conn_zone $</span><span style="color:#A6ACCD;">server_name zone=myServerName:10m</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#C792EA;">server</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> limit_conn </span><span style="color:#A6ACCD;">myip </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 单个IP同时并发连接数最多只能10个连接</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> limit_conn </span><span style="color:#A6ACCD;">myServerName </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 同时最大并发数最多只能100个链接</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">rewrite</span><span style="color:#A6ACCD;"> / http://www.example.com </span><span style="color:#F78C6C;">permanent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>配置参数</li></ul></li></ul></li><li><p>漏桶流算法和令牌桶算法</p><ul><li>漏桶算法 漏桶算法是网络世界中流量整形或速率限制时经常使用的一种算法,它的主要目的是控制数据注入到网络的速率,<code>平滑网络上的突发流量</code>。漏桶算法提供了一种机制,通过它,突发流量可以被整形以便为网络提供一个稳定的流量。<strong>突发流量会进入到一个漏桶,漏桶会按照我们定义的速率依次处理请求,如果水流过大也就是突发流量过大就会直接溢出,则多余的请求会被拒绝。所以漏桶算法能控制数据的传输速率。</strong></li><li>令牌桶算法 令牌桶算法是网络流量整形和速率限制中最常使用的一种算法。典型情况下,令牌桶算法用来控制发送到网络上的数据的数目,并允许突发数据的发送。Google开源项目Guava中的RateLimiter使用的就是令牌桶控制算法。令牌桶算法的机制如下:<strong>存在一个大小固定的令牌桶,会以恒定的速率源源不断产生令牌。如果令牌消耗速率小于生产令牌的速度,令牌就会一直产生直至装满整个令牌桶。</strong></li></ul></li><li><p>动静分离</p><ul><li>网站优化的重要点在于静态化网站,网站静态化的关键点则是是动静分离,动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来,动静资源做好了拆分以后,我们则根据静态资源的特点将其做缓存操作。</li><li>让静态的资源只走静态资源服务器,动态的走动态的服务器</li></ul></li></ol><h2 id="负载均衡的算法" tabindex="-1">负载均衡的算法 <a class="header-anchor" href="#负载均衡的算法" aria-hidden="true">#</a></h2><ol><li><p>Nginx负载均衡的算法 为了避免服务器崩溃,大家会通过负载均衡的方式来分担服务器压力。将对台服务器组成一个集群,当用户访问时,先访问到一个转发服务器,再由转发服务器将访问分发到压力更小的服务器。 衡实现的策略:</p><ul><li>轮询(默认) <ul><li>每个请求按时间顺序逐一分配到不同的后端服务器,如果后端某个服务器宕机,能自动剔除故障系统。<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">upstream</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">backserver </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">server</span><span style="color:#A6ACCD;"> 192.168.0.12;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">server</span><span style="color:#A6ACCD;"> 192.168.0.13;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li>权重 weight <ul><li>weight的值越大分配到的访问概率越高,主要用于后端每台服务器性能不均衡的情况下。其次是为在主从的情况下设置不同的权值,达到合理有效的地利用主机资源。<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">upstream</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">backserver </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">server</span><span style="color:#A6ACCD;"> 192.168.0.12 </span><span style="color:#A6ACCD;font-style:italic;">weight</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    server </span><span style="color:#F78C6C;">192.168.0.13</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">weight</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li>ip_hash( IP绑定) <ul><li>每个请求按访问IP的哈希结果分配,使来自同一个IP的访客固定访问一台后端服务器, 并且可以有效解决动态网页存在的session共享问题<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">upstream</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">backserver </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">ip_hash;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">server</span><span style="color:#A6ACCD;"> 192.168.0.12:88;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">server</span><span style="color:#A6ACCD;"> 192.168.0.13:80;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li>fair(第三方插件) <ul><li>必须安装upstream_fair模块。</li><li>对比 weight、ip_hash更加智能的负载均衡算法,fair算法可以根据页面大小和加载时间长短智能地进行负载均衡,响应时间短的优先分配。<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">upstream</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">backserver </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">server</span><span style="color:#A6ACCD;"> server1;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">server</span><span style="color:#A6ACCD;"> server2;</span></span>
<span class="line"><span style="color:#A6ACCD;">    fair;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li><li>哪个服务器的响应速度快,就将请求分配到那个服务器上。</li></ul></li><li>url_hash(第三方插件) <ul><li>必须安装Nginx的hash软件包</li><li>按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,可以进一步提高后端缓存服务器的效率。<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">upstream</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">backserver </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">server</span><span style="color:#A6ACCD;"> squid1:3128;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">server</span><span style="color:#A6ACCD;"> squid2:3128;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> hash $</span><span style="color:#A6ACCD;">request_uri</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">hash_method</span><span style="color:#A6ACCD;"> crc32</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul></li><li><p>Nginx配置高可用性(<code>connect_timeout</code> <code>send_timeout</code> <code>read_timeout</code>)</p><ul><li>当上游服务器(真实访问服务器),一旦出现故障或者是没有及时相应的话,应该直接轮训到下一台服务器,保证服务器的高可用<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">server</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> listen</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">80</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> server_name </span><span style="color:#A6ACCD;">www.example.com</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">### 指定上游服务器负载均衡服务器</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#A6ACCD;">http://backServer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">###nginx与上游服务器(真实访问的服务器)超时时间 后端服务器连接的超时时间_发起握手等候响应超时时间</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_connect_timeout </span><span style="color:#A6ACCD;">1s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">###nginx发送给上游服务器(真实访问的服务器)超时时间</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_send_timeout </span><span style="color:#A6ACCD;">1s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">### nginx接受上游服务器(真实访问的服务器)超时时间</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_read_timeout </span><span style="color:#A6ACCD;">1s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> index </span><span style="color:#A6ACCD;">index.html index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ol><h2 id="rewrite" tabindex="-1">Rewrite <a class="header-anchor" href="#rewrite" aria-hidden="true">#</a></h2><ol><li><p>Rewrite全局变量</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>$args</td><td>请求行中的参数,同$query_string</td></tr><tr><td>$content_length</td><td>请求头中的Content-length字段。</td></tr><tr><td>$content_type</td><td>请求头中的Content-Type字段。</td></tr><tr><td>$document_root</td><td>当前请求在root指令中指定的值。</td></tr><tr><td>$host</td><td>请求主机头字段,否则为服务器名称。</td></tr><tr><td>$http_user_agent</td><td>客户端agent信息</td></tr><tr><td>$http_cookie</td><td>客户端cookie信息</td></tr><tr><td>$limit_rate</td><td>这个变量可以限制连接速率。</td></tr><tr><td>$request_method</td><td>客户端请求的动作,通常为GET或POST。</td></tr><tr><td>$remote_addr</td><td>客户端的IP地址。</td></tr><tr><td>$remote_port</td><td>客户端的端口。</td></tr><tr><td>$remote_user</td><td>已经经过Auth Basic Module验证的用户名。</td></tr><tr><td>$request_filename</td><td>当前请求的文件路径,由root或alias指令与URI请求生成。</td></tr><tr><td>$scheme</td><td>HTTP方法(如http,https)。</td></tr><tr><td>$server_protocol</td><td>请求使用的协议,通常是HTTP/1.0或HTTP/1.1。</td></tr><tr><td>$server_addr</td><td>服务器地址,在完成一次系统调用后可以确定这个值。</td></tr><tr><td>$server_name</td><td>服务器名称。</td></tr><tr><td>$server_port</td><td>请求到达服务器的端口号。</td></tr><tr><td>$request_uri</td><td>包含请求参数的原始URI,不包含主机名,如”/foo/bar.php?arg=baz”。</td></tr><tr><td>$uri</td><td>不带请求参数的当前URI,$uri不包含主机名,如”/foo/bar.html”。</td></tr><tr><td>$document_uri</td><td>与$uri相同。</td></tr></tbody></table><p>eg:</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">http://localhost:88/test1/test2/</span><span style="color:#82AAFF;">test</span><span style="color:#FFCB6B;">.php</span></span>
<span class="line"><span style="color:#A6ACCD;">$host：localhost</span></span>
<span class="line"><span style="color:#A6ACCD;">$server_port：</span><span style="color:#F78C6C;">88</span></span>
<span class="line"><span style="color:#A6ACCD;">$request_uri：http://localhost:</span><span style="color:#F78C6C;">88</span><span style="color:#A6ACCD;">/test1/test2/test.php</span></span>
<span class="line"><span style="color:#A6ACCD;">$document_uri：/test1/test2/test.php</span></span>
<span class="line"><span style="color:#A6ACCD;">$document_root：/var/www/html</span></span>
<span class="line"><span style="color:#A6ACCD;">$request_filename：/var/www/html/test1/test2/test.php</span></span>
<span class="line"></span></code></pre></div></li><li><p>if 指令</p><ul><li>if判断指令语法<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">if (condition)</span></span>
<span class="line"><span style="color:#A6ACCD;">{...}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容： <ul><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li><li>直接比较变量和内容时，使用=或!=</li><li>~ 正则表达式匹配</li><li>~* 不区分大小写的匹配</li><li>!~ 区分大小写的不匹配</li><li>-f和!-f 用来判断是否存在文件</li><li>-d和!-d 用来判断是否存在目录</li><li>-e和!-e 用来判断是否存在文件或目录</li><li>-x和!-x 用来判断文件是否可执行</li></ul></li><li>eg<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 如果用户设备为IE浏览器的时候，重定向</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">http_user_agent </span><span style="color:#89DDFF;">~ </span><span style="color:#A6ACCD;">MSIE) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">rewrite</span><span style="color:#F07178;"> </span><span style="color:#C3E88D;">^(.*)$</span><span style="color:#F07178;"> /msie/</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">1</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">http_cookie </span><span style="color:#89DDFF;">~* </span><span style="color:#C3E88D;">&quot;id=([^;]+)(?:;|$)&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;"> set $</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 如果cookie匹配正则，设置变量$id等于正则引用部分</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">request_method </span><span style="color:#89DDFF;">= </span><span style="color:#A6ACCD;">POST) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">405</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">slow) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;"> limit_rate </span><span style="color:#F07178;">10k</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 限速，$slow可以通过 set 指令设置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!-f $</span><span style="color:#A6ACCD;">request_filename)</span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">break;</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#F07178;">http://127.0.0.1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 如果请求的文件名不存在，则反向代理到localhost。这里的break也是停止rewrite检查</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">args </span><span style="color:#89DDFF;">~ </span><span style="color:#A6ACCD;">post</span><span style="color:#89DDFF;">=1</span><span style="color:#A6ACCD;">40)</span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">rewrite</span><span style="color:#F07178;"> ^ http://example.com/ </span><span style="color:#F78C6C;">permanent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 如果query string中包含&quot;post=140&quot;，永久重定向到example.com</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">\\.(gif|jpg|png|swf|flv)$ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> valid_referers </span><span style="color:#A6ACCD;">none blocked www.example.com www.example.cn</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">invalid_referer) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">404</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">    }</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 防盗链</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ol><h2 id="用例" tabindex="-1">用例 <a class="header-anchor" href="#用例" aria-hidden="true">#</a></h2><ol><li><p>限制ip访问</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 如果访问的ip地址为192.168.0.123,则返回403</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">remote_addr </span><span style="color:#89DDFF;">= </span><span style="color:#A6ACCD;">192.168.0.123) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">403</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>限制浏览器访问</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">## 不允许谷歌浏览器访问 如果是谷歌浏览器返回500</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">http_user_agent </span><span style="color:#89DDFF;">~ </span><span style="color:#A6ACCD;">Chrome) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">500</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>根据不同的 URL 来限制并发连接数</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">http</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> limit_conn_zone $</span><span style="color:#A6ACCD;">binary_remote_addr zone=addr:10m</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">server</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/download/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;"> limit_conn </span><span style="color:#A6ACCD;">addr </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>限制下载速度</p></li></ol><ul><li>可以使用 core 模块提供的 limit_rate 和 limit_rate_after 参数。根据请求的数据大小来设置下载速度的上限。<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/download/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 在数据达到 100M 后限制单个连接速度为 10k/s</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> limit_rate_after </span><span style="color:#A6ACCD;">100M</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> limit_rate </span><span style="color:#A6ACCD;">10k</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><ol><li>设置防盗链</li></ol><ul><li>可以使用 nginx 的 valid_referers 指令。根据 referer 头来判断请求是否合法。 eg: 只允许本站(server_names)和google的请求访问 /images/ 目录下的静态资源：<div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/images/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> valid_referers </span><span style="color:#A6ACCD;">none blocked server_names *.google.com</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">invalid_referer) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">403</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><ol><li><p>强制发送指定 content-type</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">something </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> default_type </span><span style="color:#A6ACCD;">application/xml</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>proxy_next_upstream 和 proxy_connect_timeout 连接超时</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#A6ACCD;">http://backend</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> proxy_next_upstream </span><span style="color:#A6ACCD;">error timeout invalid_header http_500 http_502 http_503 http_504</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;"> proxy_connect_timeout </span><span style="color:#A6ACCD;">5s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>proxy_next_upstream 指令可以设置在什么情况下nginx会尝试连接下一个后端服务器，例如错误、超时、无效响应等</li><li>proxy_connect_timeout 指令可以设置nginx与后端服务器建立连接的超时时间</li></ul></li></ol>`,15),e=[o];function t(c,r,i,y,C,D){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
