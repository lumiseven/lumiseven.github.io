import{_ as s,c as n,o as a,a as l}from"./app.bd26c8cd.js";const C=JSON.parse('{"title":"谈谈你对Java平台的理解","description":"","frontmatter":{},"headers":[],"relativePath":"doc/jvm/core_question.md","lastUpdated":1751984529000}'),o={name:"doc/jvm/core_question.md"},t=l(`<h1 id="谈谈你对java平台的理解" tabindex="-1">谈谈你对Java平台的理解 <a class="header-anchor" href="#谈谈你对java平台的理解" aria-hidden="true">#</a></h1><p>作为一名常年与 Java 打交道的研究者，我对 Java 平台的理解可以用 <strong>“一个由虚拟机推动的巨大开发者生态”</strong> 来概括。它不是单一技术，而是一个<strong>多层次、高度标准化的计算平台和生态体系</strong>，核心围绕着 <strong>跨平台性、稳定性、安全性、高性能和庞大的社区</strong>。下面尽可能详细地阐述其关键组成部分和特性：</p><h2 id="一、核心基石-java-虚拟机" tabindex="-1">一、核心基石：Java 虚拟机 <a class="header-anchor" href="#一、核心基石-java-虚拟机" aria-hidden="true">#</a></h2><ul><li><strong>引擎与运行环境：</strong> JVM 是 Java 平台的灵魂。它提供<strong>运行时环境</strong>让平台无关的 Java 字节码能执行（即<code>.class</code>文件）。</li><li><strong>关键职责：</strong><ul><li><strong>类加载：</strong> 通过高效类加载器（Bootstrap、Extension、System/Application 等）实现动态加载，搭配“双亲委派”机制确保安全。</li><li><strong>字节码执行：</strong><ul><li><strong>解释器：</strong> 即时翻译执行字节码（启动快）。</li><li><strong>即时编译器：</strong> JIT（如 C1、C2/GraalVM）在运行时编译热点代码为本地机器码（运行快）。</li><li><strong>AOT 编译器：</strong> 如 GraalVM Native Image，在编译时直接将字节码编译为本地可执行文件（启动极快，占用资源减少）。</li></ul></li><li><strong>内存管理（GC）：</strong><ul><li><strong>自动垃圾回收：</strong> JVM 通过复杂的垃圾回收器回收内存（如 Serial、Parallel Scavenge/Old、CMS、G1、ZGC、Shenandoah），大幅减少开发者负担。</li><li><strong>内存模型：</strong> 如堆（Heap）、栈（Stack）、方法区/元空间（Metaspace）等定义。</li></ul></li><li><strong>运行时优化：</strong> 持续优化字节码执行效率（如内联、逃逸分析和即时编译）。</li></ul></li><li><strong>跨平台特性：</strong> “一次编写，随处运行”的关键基础就是 JVM，各平台有对应实现。</li></ul><h2 id="二、核心库-api" tabindex="-1">二、核心库 API <a class="header-anchor" href="#二、核心库-api" aria-hidden="true">#</a></h2><ul><li><strong>基础设施支持：</strong> 提供强大且标准化的功能支撑核心开发： <ul><li><strong>基础类库：</strong> <code>java.lang</code>（如 Object, String, Class 等）、<code>java.util</code>（容器如 List， Map， 时间处理等）、<code>java.io</code>/<code>java.nio</code>（IO/NIO）。</li><li><strong>并发包：</strong> <code>java.util.concurrent</code>（线程池如 ExecutorService、并发容器、Lock 和 AQS）。</li><li><strong>工具类：</strong> 数学计算（<code>java.math</code>）、反射（<code>java.lang.reflect</code>）、注解、函数式接口（java.util.function）等。</li><li><strong>安全管理：</strong> <code>java.security</code> （访问控制、证书等）。</li></ul></li><li><strong>标准扩展 API：</strong><ul><li><strong>数据库访问：</strong> JDBC（<code>java.sql</code>, <code>javax.sql</code>）。</li><li><strong>网络通信：</strong> 套接字、HTTP 客户端（HTTPURLConnection、HttpClient JDK 11+）。</li><li><strong>XML 处理：</strong> JAXP。</li><li><strong>日志：</strong> <code>java.util.logging</code>（SLF4J/Logback 等更常用，但也在平台内或上层生态内）。</li></ul></li></ul><h2 id="三、java-语言本身" tabindex="-1">三、Java 语言本身 <a class="header-anchor" href="#三、java-语言本身" aria-hidden="true">#</a></h2><ul><li><strong>面向对象设计：</strong> 封装、继承、多态是其核心支柱。</li><li><strong>强类型和相对安全：</strong> 编译期类型检查有效减少运行时错误。</li><li><strong>相对简单：</strong> 无指针、内存自动管理等提升开发体验。</li><li><strong>稳健发展：</strong><ul><li><strong>持续演进：</strong> JDK 5（泛型、枚举、注解）、JDK 8（Lambda、Stream API）、JDK 9（模块系统）、JDK 11（LTS 主力）、JDK 17/21（新 LTS）。</li><li><strong>项目推进：</strong> Valhalla（值类型）、Panama（FFI）、Loom（虚拟线程）等持续优化语言性能和表现力。</li></ul></li></ul><h2 id="四、工具集-支撑全开发周期" tabindex="-1">四、工具集：支撑全开发周期 <a class="header-anchor" href="#四、工具集-支撑全开发周期" aria-hidden="true">#</a></h2><ul><li><strong>JDK：</strong> 包含 JRE、编译器（javac）、调试器（jdb）、监控工具（jconsole, jvisualvm）、打包工具（jar）等。</li><li><strong>诊断与调优工具：</strong><ul><li>命令行（jps, jstat, jmap, jstack）</li><li>图形化（VisualVM, JMC）</li><li>第三方（Arthas, YourKit）</li></ul></li></ul><h2 id="五、生态体系-平台的真正实力" tabindex="-1">五、生态体系：平台的真正实力 <a class="header-anchor" href="#五、生态体系-平台的真正实力" aria-hidden="true">#</a></h2><ul><li><strong>构建工具：</strong> Maven、Gradle（标准化依赖管理和构建）。</li><li><strong>主流框架：</strong><ul><li>综合：Spring Framework（包括 Spring Boot、Spring Cloud、Spring Security 等）</li><li>Web：Jakarta EE（前 Java EE）、Play、Dropwizard</li><li>ORM：Hibernate、MyBatis</li></ul></li><li><strong>测试工具：</strong> JUnit、TestNG、Mockito、JaCoCo 等完整测试生态。</li><li><strong>应用服务器：</strong> Tomcat、Jetty、WildFly、GlassFish、WebLogic、WebSphere（部署企业级解决方案）。</li><li><strong>微服务支持：</strong> Netflix OSS、Spring Cloud 等实现现代化分布式架构。</li><li><strong>大数据技术：</strong> Apache Hadoop/Spark/Flink/Kafka 多以 JVM 平台为基础。</li></ul><h2 id="六、java-平台的核心价值主张" tabindex="-1">六、Java 平台的核心价值主张 <a class="header-anchor" href="#六、java-平台的核心价值主张" aria-hidden="true">#</a></h2><ul><li><strong>跨平台可移植性：</strong> 在绝大多数操作系统上均可运行。</li><li><strong>高性能与可扩展：</strong> JVM 持续优化和即时编译确保高性能，GC 技术成熟支撑大规模应用。</li><li><strong>高安全性：</strong> 字节码校验、安全管理器、沙箱机制和类加载机制提供多维度保障。</li><li><strong>成熟的开发体验：</strong> 丰富的文档、IDE（IntelliJ IDEA/Eclipse）强大支持、异常处理清晰。</li><li><strong>蓬勃的生态圈：</strong> 社区支持强大、开源库覆盖全面，持续解决复杂场景问题。</li><li><strong>稳健与成熟度高：</strong> 经过 20 多年验证的架构使其成为企业级应用的首选。</li><li><strong>与时俱进：</strong> 不断拥抱新技术范式（云原生、函数式编程、服务网格等）。</li></ul><hr><h2 id="核心概念总结" tabindex="-1">核心概念总结 <a class="header-anchor" href="#核心概念总结" aria-hidden="true">#</a></h2><table><thead><tr><th>概念</th><th>作用</th><th>关键技术示例</th></tr></thead><tbody><tr><td><strong>JVM</strong></td><td>代码执行环境</td><td>类加载器、垃圾回收器、JIT/HotSpot</td></tr><tr><td><strong>字节码</strong></td><td>跨平台中间格式</td><td>.class 文件、JVM指令集</td></tr><tr><td><strong>核心库</strong></td><td>提供基础API</td><td>java.lang、java.util、java.io、java.nio</td></tr><tr><td><strong>Java SE/EE</strong></td><td>平台标准规范</td><td>SE 基础API、EE企业级扩展</td></tr><tr><td><strong>工具链</strong></td><td>开发者支持</td><td>JDK工具、Maven/Gradle、JUnit</td></tr><tr><td><strong>生态系统</strong></td><td>扩展平台能力</td><td>Spring框架、Hibernate、Tomcat服务</td></tr></tbody></table><h2 id="我眼中的-java-平台关键特征" tabindex="-1">我眼中的 Java 平台关键特征 <a class="header-anchor" href="#我眼中的-java-平台关键特征" aria-hidden="true">#</a></h2><ol><li><strong>虚拟机为中心</strong>：JVM 是跨平台基石，性能优化核心。</li><li><strong>强类型 OOP 语言+函数式扩展</strong>：Java 语言持续进化，兼顾传统与现代编程范式。</li><li><strong>丰富核心库</strong>：提供现代软件开发所需的基础构建块。</li><li><strong>成熟内存管理系统</strong>：自动 GC 和多种优化策略显著提升开发者效率。</li><li><strong>生态驱动价值</strong>：从 Maven 到 Spring，整个生态解决了现实世界开发中的各种难题。</li><li><strong>企业级稳健性</strong>：经过大规模实践验证的架构使其长期担当关键业务支撑。</li><li><strong>开放性标准与开源动力</strong>：JCP 等标准化组织与强大的开源社区持续推动进化。</li></ol><hr><p><strong>总而言之，Java 平台是一个以 JVM 为核心驱动、拥有强大核心库支撑、以 Java 语言为主要开发语言、配套成熟工具链、并被庞大开源生态和商业应用所包围的高度成功的计算平台。其核心价值在于跨平台能力、高性能保障、成熟的开发体验和极其丰富的生态系统支撑</strong>。它既是技术体系，更是一种开发文化，始终在适应新挑战的同时保持着强大的生命力。这正是 Java 长盛不衰的根本原因——不仅是工具，更是完整的解决方案生态系统。</p><hr><h1 id="java中的exception和error有什么区别" tabindex="-1">java中的exception和error有什么区别 <a class="header-anchor" href="#java中的exception和error有什么区别" aria-hidden="true">#</a></h1><p>在Java中，<code>Error</code> 和 <code>Exception</code> 都是 <code>Throwable</code> 类的子类，但它们代表了不同性质的问题，处理方式也有显著区别。以下是主要区别的总结：</p><hr><h3 id="🚨-1-根本区别" tabindex="-1">🚨 <strong>1. 根本区别</strong> <a class="header-anchor" href="#🚨-1-根本区别" aria-hidden="true">#</a></h3><table><thead><tr><th></th><th><strong><code>Exception</code></strong></th><th><strong><code>Error</code></strong></th></tr></thead><tbody><tr><td><strong>本质</strong></td><td><strong>应用程序级问题</strong></td><td><strong>系统级严重问题</strong></td></tr><tr><td><strong>可恢复性</strong></td><td>多数可被捕获并恢复</td><td><strong>通常不可恢复</strong>（如内存耗尽）</td></tr><tr><td><strong>责任方</strong></td><td>程序员编写的代码</td><td>JVM环境或底层资源问题</td></tr></tbody></table><hr><h3 id="🧩-2-类型区分" tabindex="-1">🧩 <strong>2. 类型区分</strong> <a class="header-anchor" href="#🧩-2-类型区分" aria-hidden="true">#</a></h3><ul><li><p><strong><code>Exception</code> (异常)</strong></p><ul><li><strong>受检异常（Checked）</strong>：编译时必须处理（<code>IOException</code>, <code>SQLException</code>等）</li><li><strong>非受检异常（Unchecked）</strong>：运行时异常（<code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code>等）</li></ul></li><li><p><strong><code>Error</code> (错误)</strong> 所有错误都是<strong>非受检</strong>的（如 <code>OutOfMemoryError</code>, <code>StackOverflowError</code>），无需在代码中显式处理。</p></li></ul><hr><h3 id="⚙️-3-典型例子" tabindex="-1">⚙️ <strong>3. 典型例子</strong> <a class="header-anchor" href="#⚙️-3-典型例子" aria-hidden="true">#</a></h3><table><thead><tr><th><strong><code>Exception</code> 示例</strong></th><th><strong><code>Error</code> 示例</strong></th></tr></thead><tbody><tr><td><code>FileNotFoundException</code></td><td><code>OutOfMemoryError</code>（内存耗尽）</td></tr><tr><td><code>ClassNotFoundException</code></td><td><code>StackOverflowError</code>（栈溢出）</td></tr><tr><td><code>InterruptedException</code></td><td><code>NoClassDefFoundError</code>（类加载失败）</td></tr></tbody></table><hr><h3 id="🛠️-4-处理方式建议" tabindex="-1">🛠️ <strong>4. 处理方式建议</strong> <a class="header-anchor" href="#🛠️-4-处理方式建议" aria-hidden="true">#</a></h3><ul><li><p><strong><code>Exception</code> 处理</strong>： 应通过 <code>try-catch</code> 捕获并恢复，或用 <code>throws</code> 声明：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 可能抛出Exception的代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 恢复逻辑（如重试或提示用户）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p><strong><code>Error</code> 处理</strong>： ❌ <strong>禁止主动捕获</strong>！因无法有效恢复，捕获可能掩盖严重问题：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 错误示例！（不要这样写）</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 某些操作</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">OutOfMemoryError</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 无法实际解决内存耗尽问题</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><hr><h3 id="📌-关键总结" tabindex="-1">📌 <strong>关键总结</strong> <a class="header-anchor" href="#📌-关键总结" aria-hidden="true">#</a></h3><table><thead><tr><th>特性</th><th><code>Exception</code></th><th><code>Error</code></th></tr></thead><tbody><tr><td><strong>是否可恢复</strong></td><td>✅ 多数可恢复</td><td>❌ 不可恢复</td></tr><tr><td><strong>是否强制处理</strong></td><td>受检异常强制处理</td><td>不强制处理</td></tr><tr><td><strong>来源</strong></td><td>应用程序逻辑问题</td><td>JVM/系统资源崩溃</td></tr><tr><td><strong>是否应被捕获</strong></td><td>✅ 需针对性处理</td><td>❌ 避免捕获（除特殊场景如日志记录）</td></tr></tbody></table><hr><h3 id="🌰-代码示例" tabindex="-1">🌰 代码示例 <a class="header-anchor" href="#🌰-代码示例" aria-hidden="true">#</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 异常处理（正常流程）</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Files</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">missing_file.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 捕获Exception</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">文件不存在：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMessage</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Error场景：捕获无意义，程序仍会崩溃</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Integer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_VALUE</span><span style="color:#89DDFF;">];</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 触发OutOfMemoryError</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">OutOfMemoryError</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 此处无法真正恢复内存！</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">内存耗尽（实际应终止程序）</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>💡 <strong>最佳实践</strong>：</p><ul><li>对 <code>Exception</code> 编写健壮的恢复逻辑</li><li>对 <code>Error</code> 记录日志后<strong>终止程序</strong>（通常由JVM自动处理）</li><li>永远不要吞掉 <code>Throwable</code>（如 <code>catch (Throwable t)</code>）！</li></ul></blockquote><hr><h1 id="谈谈-java中的-final-finally-finalize-有什么不同" tabindex="-1">谈谈 java中的 final finally finalize 有什么不同？ <a class="header-anchor" href="#谈谈-java中的-final-finally-finalize-有什么不同" aria-hidden="true">#</a></h1><p>在Java中，<code>final</code>、<code>finally</code> 和 <code>finalize</code> 虽然名称相似，但功能和使用场景<strong>完全不同</strong>。以下是详细对比：</p><hr><h3 id="⭐-1-final-关键字" tabindex="-1">⭐ <strong>1. final（关键字）</strong> <a class="header-anchor" href="#⭐-1-final-关键字" aria-hidden="true">#</a></h3><p><strong>核心作用</strong>： <strong>修饰不可变性</strong>，可应用于类、方法、变量。</p><table><thead><tr><th>应用场景</th><th>规则</th><th>示例</th></tr></thead><tbody><tr><td><strong>final变量</strong></td><td>变量值/引用地址不可变（基本类型值不变，引用类型地址不变）</td><td><code>final int x = 10;</code> <br> <code>final List&lt;String&gt; list = new ArrayList&lt;&gt;();</code></td></tr><tr><td><strong>final方法</strong></td><td>禁止子类重写（Override）</td><td><code>public final void doWork() { ... }</code></td></tr><tr><td><strong>final类</strong></td><td>禁止类被继承（不能有子类）</td><td><code>public final class ImmutableClass { ... }</code></td></tr></tbody></table><p><strong>注意事项</strong>：</p><ul><li><code>final</code> 修饰引用类型变量时，<strong>对象内容可变</strong>（如集合可增删元素）。</li><li>常与 <code>static</code> 组合定义常量：<code>public static final double PI = 3.14;</code></li></ul><hr><h3 id="⭐-2-finally-关键字" tabindex="-1">⭐ <strong>2. finally（关键字）</strong> <a class="header-anchor" href="#⭐-2-finally-关键字" aria-hidden="true">#</a></h3><p><strong>核心作用</strong>： <strong>确保资源清理</strong>，必须与 <code>try-catch</code> 块一起使用。</p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>必然执行</strong></td><td>无论是否发生异常、<code>return</code> 或 <code>break</code>，都会执行（<em>极端情况除外</em>）</td></tr><tr><td><strong>资源清理</strong></td><td>用于关闭文件流、数据库连接、释放锁等</td></tr><tr><td><strong>避免资源泄漏</strong></td><td>比靠GC回收更及时可靠</td></tr></tbody></table><p><strong>执行逻辑</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 可能抛出异常的代码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">openFile</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 异常处理</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    file</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 无论如何都会关闭文件</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>极端不执行场景</strong>：</p><ol><li><code>System.exit(0)</code> 强制退出</li><li>JVM崩溃（如 <code>kill -9</code> 杀掉进程）</li><li>无限循环阻塞 finally 线程</li></ol><hr><h3 id="⭐-3-finalize-方法" tabindex="-1">⭐ <strong>3. finalize（方法）</strong> <a class="header-anchor" href="#⭐-3-finalize-方法" aria-hidden="true">#</a></h3><p><strong>核心作用</strong>： <strong>对象回收前的最后一次清理</strong>（Object类的方法）。</p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><strong>不可靠的执行时机</strong></td><td>GC回收前触发，<strong>时机不确定甚至不执行</strong></td></tr><tr><td><strong>已被官方弃用</strong></td><td>Java 9 标记为<code>@Deprecated</code>（实际开发中避免使用）</td></tr><tr><td><strong>潜在风险</strong></td><td>性能问题（减慢GC）<br>资源泄漏（若未执行）<br>僵尸对象复活（可破坏GC）</td></tr></tbody></table><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">finalize</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> throws Throwable </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">releaseNativeResource</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 尝试释放JNI资源</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">finalize</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 调用父类清理</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>替代方案</strong>：</p><ul><li>推荐使用 <strong><code>AutoCloseable</code> 接口 + try-with-resources</strong>（Java 7+）：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">FileInputStream</span><span style="color:#A6ACCD;"> file </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FileInputStream</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 自动调用file.close()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><hr><h3 id="🎯-三者的本质区别" tabindex="-1">🎯 <strong>三者的本质区别</strong> <a class="header-anchor" href="#🎯-三者的本质区别" aria-hidden="true">#</a></h3><table><thead><tr><th>特性</th><th>final</th><th>finally</th><th>finalize</th></tr></thead><tbody><tr><td><strong>类型</strong></td><td><strong>关键字</strong></td><td><strong>关键字</strong></td><td><strong>Object的方法</strong></td></tr><tr><td><strong>作用域</strong></td><td>类/方法/变量</td><td>异常处理块</td><td>垃圾回收</td></tr><tr><td><strong>执行时机</strong></td><td>编译/运行时</td><td>异常处理后</td><td>GC前（不确定）</td></tr><tr><td><strong>可靠性</strong></td><td>语言级保证</td><td>非极端场景保证</td><td>不保证执行</td></tr><tr><td><strong>用途</strong></td><td>增强安全/设计约束</td><td>资源清理</td><td>历史遗留清理</td></tr></tbody></table><hr><h3 id="✅-最佳实践建议" tabindex="-1">✅ <strong>最佳实践建议</strong> <a class="header-anchor" href="#✅-最佳实践建议" aria-hidden="true">#</a></h3><ol><li>🛡️ <strong>多用 <code>final</code></strong>：提升代码安全性和设计清晰度（如不可变类）。</li><li>🔁 <strong>资源清理用 <code>finally</code> 或 try-with-resources</strong>：确保100%执行。</li><li>❌ <strong>避免 <code>finalize</code></strong>：使用 <code>Cleaner</code>（Java 9+）或手动资源管理替代。</li></ol><blockquote><p><strong>关键总结</strong>：</p><ul><li><code>final</code> → <strong>设计约束</strong>（不可变）</li><li><code>finally</code> → <strong>资源清理</strong>（必须执行）</li><li><code>finalize</code> → <strong>历史遗留</strong>（弃用机制）</li></ul></blockquote><hr><h1 id="java中的强引用-弱引用-幻象引用-有什么区别" tabindex="-1">java中的强引用 弱引用 幻象引用 有什么区别？ <a class="header-anchor" href="#java中的强引用-弱引用-幻象引用-有什么区别" aria-hidden="true">#</a></h1><p>在Java中，引用类型主要分为<strong>强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）和幻象引用（Phantom Reference）</strong>。它们的主要区别在于垃圾回收器（GC）对待这些引用的方式不同，从而影响对象的生命周期和回收机制。</p><hr><h3 id="_1-强引用-strong-reference" tabindex="-1">1. <strong>强引用（Strong Reference）</strong> <a class="header-anchor" href="#_1-强引用-strong-reference" aria-hidden="true">#</a></h3><p><strong>特点</strong>：</p><ul><li><strong>最常见</strong>的引用类型，默认创建的引用都是强引用。</li><li>只要强引用存在，对象<strong>不会被GC回收</strong>（即使内存不足，JVM宁愿抛出<code>OutOfMemoryError</code>）。</li><li>强引用之间的依赖关系可能导致<strong>内存泄漏</strong>（如集合中无用的对象未移除）。</li></ul><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 强引用</span></span>
<span class="line"></span></code></pre></div><p><strong>回收时机</strong>：</p><ul><li>显式设置 <code>obj = null</code> 解除引用后，对象会被回收。</li><li>作用域结束（如局部变量超出作用域）。</li></ul><hr><h3 id="_2-弱引用-weak-reference" tabindex="-1">2. <strong>弱引用（Weak Reference）</strong> <a class="header-anchor" href="#_2-弱引用-weak-reference" aria-hidden="true">#</a></h3><p><strong>特点</strong>：</p><ul><li>通过 <code>java.lang.ref.WeakReference</code> 类实现。</li><li>当<strong>仅存在弱引用</strong>时，对象会在<strong>下一次GC时被回收</strong>（无论内存是否充足）。</li><li>常用于实现<strong>缓存</strong>（如 <code>WeakHashMap</code>），避免因缓存导致内存泄漏。</li></ul><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> weakRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> weakRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取对象（若未被回收）</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gc</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// GC后若对象被回收，则 weakRef.get() 返回 null</span></span>
<span class="line"></span></code></pre></div><p><strong>典型场景</strong>：</p><ul><li><code>WeakHashMap</code> 的键（Key）使用弱引用存储，当键不再被强引用时，对应的键值对会被自动移除。</li></ul><hr><h3 id="_3-幻象引用-phantom-reference" tabindex="-1">3. <strong>幻象引用（Phantom Reference）</strong> <a class="header-anchor" href="#_3-幻象引用-phantom-reference" aria-hidden="true">#</a></h3><p><strong>特点</strong>：</p><ul><li>通过 <code>java.lang.ref.PhantomReference</code> 类实现。</li><li><strong>最弱</strong>的引用类型，无法通过 <code>get()</code> 方法获取到对象（始终返回 <code>null</code>）。</li><li>必须配合 <strong>引用队列（ReferenceQueue）</strong> 使用。</li><li>用于在对象<strong>被回收时收到系统通知</strong>（如清理堆外内存等资源）。</li></ul><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> queue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#C792EA;">PhantomReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> phantomRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">PhantomReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对象被GC回收前，phantomRef 会自动加入 queue</span></span>
<span class="line"><span style="color:#C792EA;">Reference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 阻塞直到有引用入队</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">对象已被回收，资源清理完成</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p><strong>回收时机</strong>：</p><ul><li>对象本身被回收后，幻象引用会进入引用队列，通知开发者执行<strong>资源清理</strong>（如关闭文件句柄、释放堆外内存）。</li></ul><hr><h3 id="_4-软引用-soft-reference" tabindex="-1">4. <strong>软引用（Soft Reference）</strong> <a class="header-anchor" href="#_4-软引用-soft-reference" aria-hidden="true">#</a></h3><p><strong>补充说明</strong>：</p><ul><li>虽未提及但需完整对比：通过 <code>SoftReference</code> 类实现。</li><li>当<strong>内存不足</strong>时（即将抛出 <code>OutOfMemoryError</code> 前），GC才会回收仅被软引用的对象。</li><li>适合实现<strong>内存敏感的缓存</strong>（如大图片缓存）。</li></ul><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">SoftReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> softRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">SoftReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="引用队列-referencequeue" tabindex="-1">引用队列（ReferenceQueue） <a class="header-anchor" href="#引用队列-referencequeue" aria-hidden="true">#</a></h3><ul><li><strong>作用</strong>：在弱引用、软引用或幻象引用关联的对象被回收后，引用对象本身会被加入到队列中。</li><li><strong>典型用法</strong>：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> queue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 检查对象是否被回收</span></span>
<span class="line"><span style="color:#C792EA;">Reference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> clearedRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">poll</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 非阻塞检查</span></span>
<span class="line"></span></code></pre></div></li></ul><hr><h3 id="对比总结" tabindex="-1">对比总结 <a class="header-anchor" href="#对比总结" aria-hidden="true">#</a></h3><table><thead><tr><th>引用类型</th><th>回收时机</th><th><code>get()</code> 返回值</th><th>用途</th><th>实现类</th></tr></thead><tbody><tr><td><strong>强引用</strong></td><td><strong>永不回收</strong>（除非解除）</td><td>对象本身</td><td>常规对象引用</td><td>默认（无特殊类）</td></tr><tr><td><strong>软引用</strong></td><td><strong>内存不足时</strong></td><td>对象本身（若未回收）</td><td>实现内存敏感缓存（如图片缓存）</td><td><code>SoftReference</code></td></tr><tr><td><strong>弱引用</strong></td><td><strong>下一次GC时</strong></td><td>对象本身（若未回收）</td><td>防止缓存导致内存泄漏（如<code>WeakHashMap</code>）</td><td><code>WeakReference</code></td></tr><tr><td><strong>幻象引用</strong></td><td><strong>GC回收后通知</strong></td><td><strong>始终为null</strong></td><td>对象回收的清理工作（如堆外内存）</td><td><code>PhantomReference</code></td></tr></tbody></table><hr><h3 id="关键区别点" tabindex="-1">关键区别点 <a class="header-anchor" href="#关键区别点" aria-hidden="true">#</a></h3><ol><li><p><strong>回收强度</strong>： 强引用 &gt; 软引用 &gt; 弱引用 &gt; 幻象引用 （从左到右，对对象的约束依次减弱，回收可能性增加）</p></li><li><p><strong>实际效果</strong>：</p><ul><li>强引用阻止GC回收对象；</li><li>软引用在内存紧张时被回收；</li><li>弱引用在下次GC时即刻回收；</li><li>幻象引用仅用于接收对象回收的通知。</li></ul></li><li><p><strong>实用场景</strong>：</p><ul><li>强引用：常规对象管理。</li><li>软引用：对象缓存（如 <code>Android</code> 图片加载库）。</li><li>弱引用：自动清理的无干扰缓存（如 <code>WeakHashMap</code>）。</li><li>幻象引用：资源清理（如 <code>DirectByteBuffer</code> 堆外内存释放）。</li></ul></li></ol><hr><h3 id="代码验证示例" tabindex="-1">代码验证示例 <a class="header-anchor" href="#代码验证示例" aria-hidden="true">#</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReferenceTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> queue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 强引用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> strongObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">强引用对象：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> strongObj</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 弱引用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> weakRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">弱引用对象（GC前）：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> weakRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 幻象引用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">PhantomReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> phantomRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">PhantomReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">幻象引用对象（始终null）：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> phantomRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 触发GC</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gc</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 给GC时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 检查回收结果</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">弱引用对象（GC后）：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> weakRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出 null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 从队列中检查回收通知（弱引用和幻象引用都会入队）</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Reference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">poll</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ref </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> weakRef</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">弱引用进入队列 - 对象被回收</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ref </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> phantomRef</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">幻象引用进入队列 - 可执行清理工作</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>输出</strong>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">强引用对象：java.lang.Object@1b6d3586</span></span>
<span class="line"><span style="color:#A6ACCD;">弱引用对象（GC前）：java.lang.Object@4554617c</span></span>
<span class="line"><span style="color:#A6ACCD;">幻象引用对象（始终null）：null</span></span>
<span class="line"><span style="color:#A6ACCD;">弱引用对象（GC后）：null</span></span>
<span class="line"><span style="color:#A6ACCD;">弱引用进入队列 - 对象被回收</span></span>
<span class="line"><span style="color:#A6ACCD;">幻象引用进入队列 - 可执行清理工作</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><hr><p>通过不同引用类型的设计，Java为开发者提供了更精细的内存管理手段，尤其在缓存、监听、资源清理等场景中能有效防止内存泄漏。</p><hr><h1 id="java中的强引用-弱引用-幻象引用-有什么区别-1" tabindex="-1">java中的强引用 弱引用 幻象引用 有什么区别？ <a class="header-anchor" href="#java中的强引用-弱引用-幻象引用-有什么区别-1" aria-hidden="true">#</a></h1><p>在Java中，引用类型主要分为<strong>强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）和幻象引用（Phantom Reference）</strong>。它们的主要区别在于垃圾回收器（GC）对待这些引用的方式不同，从而影响对象的生命周期和回收机制。</p><hr><h3 id="_1-强引用-strong-reference-1" tabindex="-1">1. <strong>强引用（Strong Reference）</strong> <a class="header-anchor" href="#_1-强引用-strong-reference-1" aria-hidden="true">#</a></h3><p><strong>特点</strong>：</p><ul><li><strong>最常见</strong>的引用类型，默认创建的引用都是强引用。</li><li>只要强引用存在，对象<strong>不会被GC回收</strong>（即使内存不足，JVM宁愿抛出<code>OutOfMemoryError</code>）。</li><li>强引用之间的依赖关系可能导致<strong>内存泄漏</strong>（如集合中无用的对象未移除）。</li></ul><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 强引用</span></span>
<span class="line"></span></code></pre></div><p><strong>回收时机</strong>：</p><ul><li>显式设置 <code>obj = null</code> 解除引用后，对象会被回收。</li><li>作用域结束（如局部变量超出作用域）。</li></ul><hr><h3 id="_2-弱引用-weak-reference-1" tabindex="-1">2. <strong>弱引用（Weak Reference）</strong> <a class="header-anchor" href="#_2-弱引用-weak-reference-1" aria-hidden="true">#</a></h3><p><strong>特点</strong>：</p><ul><li>通过 <code>java.lang.ref.WeakReference</code> 类实现。</li><li>当<strong>仅存在弱引用</strong>时，对象会在<strong>下一次GC时被回收</strong>（无论内存是否充足）。</li><li>常用于实现<strong>缓存</strong>（如 <code>WeakHashMap</code>），避免因缓存导致内存泄漏。</li></ul><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> weakRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> weakRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取对象（若未被回收）</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gc</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// GC后若对象被回收，则 weakRef.get() 返回 null</span></span>
<span class="line"></span></code></pre></div><p><strong>典型场景</strong>：</p><ul><li><code>WeakHashMap</code> 的键（Key）使用弱引用存储，当键不再被强引用时，对应的键值对会被自动移除。</li></ul><hr><h3 id="_3-幻象引用-phantom-reference-1" tabindex="-1">3. <strong>幻象引用（Phantom Reference）</strong> <a class="header-anchor" href="#_3-幻象引用-phantom-reference-1" aria-hidden="true">#</a></h3><p><strong>特点</strong>：</p><ul><li>通过 <code>java.lang.ref.PhantomReference</code> 类实现。</li><li><strong>最弱</strong>的引用类型，无法通过 <code>get()</code> 方法获取到对象（始终返回 <code>null</code>）。</li><li>必须配合 <strong>引用队列（ReferenceQueue）</strong> 使用。</li><li>用于在对象<strong>被回收时收到系统通知</strong>（如清理堆外内存等资源）。</li></ul><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> queue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#C792EA;">PhantomReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> phantomRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">PhantomReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对象被GC回收前，phantomRef 会自动加入 queue</span></span>
<span class="line"><span style="color:#C792EA;">Reference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 阻塞直到有引用入队</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">对象已被回收，资源清理完成</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p><strong>回收时机</strong>：</p><ul><li>对象本身被回收后，幻象引用会进入引用队列，通知开发者执行<strong>资源清理</strong>（如关闭文件句柄、释放堆外内存）。</li></ul><hr><h3 id="_4-软引用-soft-reference-1" tabindex="-1">4. <strong>软引用（Soft Reference）</strong> <a class="header-anchor" href="#_4-软引用-soft-reference-1" aria-hidden="true">#</a></h3><p><strong>补充说明</strong>：</p><ul><li>虽未提及但需完整对比：通过 <code>SoftReference</code> 类实现。</li><li>当<strong>内存不足</strong>时（即将抛出 <code>OutOfMemoryError</code> 前），GC才会回收仅被软引用的对象。</li><li>适合实现<strong>内存敏感的缓存</strong>（如大图片缓存）。</li></ul><p><strong>示例</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">SoftReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> softRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">SoftReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="引用队列-referencequeue-1" tabindex="-1">引用队列（ReferenceQueue） <a class="header-anchor" href="#引用队列-referencequeue-1" aria-hidden="true">#</a></h3><ul><li><strong>作用</strong>：在弱引用、软引用或幻象引用关联的对象被回收后，引用对象本身会被加入到队列中。</li><li><strong>典型用法</strong>：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> queue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 检查对象是否被回收</span></span>
<span class="line"><span style="color:#C792EA;">Reference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> clearedRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">poll</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 非阻塞检查</span></span>
<span class="line"></span></code></pre></div></li></ul><hr><h3 id="对比总结-1" tabindex="-1">对比总结 <a class="header-anchor" href="#对比总结-1" aria-hidden="true">#</a></h3><table><thead><tr><th>引用类型</th><th>回收时机</th><th><code>get()</code> 返回值</th><th>用途</th><th>实现类</th></tr></thead><tbody><tr><td><strong>强引用</strong></td><td><strong>永不回收</strong>（除非解除）</td><td>对象本身</td><td>常规对象引用</td><td>默认（无特殊类）</td></tr><tr><td><strong>软引用</strong></td><td><strong>内存不足时</strong></td><td>对象本身（若未回收）</td><td>实现内存敏感缓存（如图片缓存）</td><td><code>SoftReference</code></td></tr><tr><td><strong>弱引用</strong></td><td><strong>下一次GC时</strong></td><td>对象本身（若未回收）</td><td>防止缓存导致内存泄漏（如<code>WeakHashMap</code>）</td><td><code>WeakReference</code></td></tr><tr><td><strong>幻象引用</strong></td><td><strong>GC回收后通知</strong></td><td><strong>始终为null</strong></td><td>对象回收的清理工作（如堆外内存）</td><td><code>PhantomReference</code></td></tr></tbody></table><hr><h3 id="关键区别点-1" tabindex="-1">关键区别点 <a class="header-anchor" href="#关键区别点-1" aria-hidden="true">#</a></h3><ol><li><p><strong>回收强度</strong>： 强引用 &gt; 软引用 &gt; 弱引用 &gt; 幻象引用 （从左到右，对对象的约束依次减弱，回收可能性增加）</p></li><li><p><strong>实际效果</strong>：</p><ul><li>强引用阻止GC回收对象；</li><li>软引用在内存紧张时被回收；</li><li>弱引用在下次GC时即刻回收；</li><li>幻象引用仅用于接收对象回收的通知。</li></ul></li><li><p><strong>实用场景</strong>：</p><ul><li>强引用：常规对象管理。</li><li>软引用：对象缓存（如 <code>Android</code> 图片加载库）。</li><li>弱引用：自动清理的无干扰缓存（如 <code>WeakHashMap</code>）。</li><li>幻象引用：资源清理（如 <code>DirectByteBuffer</code> 堆外内存释放）。</li></ul></li></ol><hr><h3 id="代码验证示例-1" tabindex="-1">代码验证示例 <a class="header-anchor" href="#代码验证示例-1" aria-hidden="true">#</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReferenceTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> queue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ReferenceQueue</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 强引用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> strongObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">强引用对象：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> strongObj</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 弱引用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> weakRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">WeakReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">弱引用对象（GC前）：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> weakRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 幻象引用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">PhantomReference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> phantomRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">PhantomReference</span><span style="color:#89DDFF;">&lt;&gt;(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">幻象引用对象（始终null）：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> phantomRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 触发GC</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gc</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 给GC时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 检查回收结果</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">弱引用对象（GC后）：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> weakRef</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出 null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 从队列中检查回收通知（弱引用和幻象引用都会入队）</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Reference</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">poll</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ref </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> weakRef</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">弱引用进入队列 - 对象被回收</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ref </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> phantomRef</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">幻象引用进入队列 - 可执行清理工作</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>输出</strong>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">强引用对象：java.lang.Object@1b6d3586</span></span>
<span class="line"><span style="color:#A6ACCD;">弱引用对象（GC前）：java.lang.Object@4554617c</span></span>
<span class="line"><span style="color:#A6ACCD;">幻象引用对象（始终null）：null</span></span>
<span class="line"><span style="color:#A6ACCD;">弱引用对象（GC后）：null</span></span>
<span class="line"><span style="color:#A6ACCD;">弱引用进入队列 - 对象被回收</span></span>
<span class="line"><span style="color:#A6ACCD;">幻象引用进入队列 - 可执行清理工作</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><hr><p>通过不同引用类型的设计，Java为开发者提供了更精细的内存管理手段，尤其在缓存、监听、资源清理等场景中能有效防止内存泄漏。</p><hr><h1 id="java-中-string-stringbuffer-stringbuilder-有什么区别" tabindex="-1">java 中 String StringBuffer StringBuilder 有什么区别？ <a class="header-anchor" href="#java-中-string-stringbuffer-stringbuilder-有什么区别" aria-hidden="true">#</a></h1><p>在Java中，<code>String</code>、<code>StringBuffer</code>和<code>StringBuilder</code>都用于处理字符串，但它们在<strong>可变性、线程安全性和性能</strong>方面有显著区别。以下是详细对比：</p><hr><h3 id="_1-string-不可变" tabindex="-1">1. <strong>String (不可变)</strong> <a class="header-anchor" href="#_1-string-不可变" aria-hidden="true">#</a></h3><ul><li><strong>核心特性</strong>：不可变（Immutable），任何修改操作（如拼接、替换）都会<strong>创建新对象</strong>。</li><li><strong>线程安全</strong>：天然线程安全（因不可变性）。</li><li><strong>内存开销</strong>：频繁修改会产生大量临时对象，影响性能。</li><li><strong>典型场景</strong>：常量字符串、不频繁修改的字符串。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">str </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 隐式创建新对象+垃圾回收</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="_2-stringbuffer-可变-线程安全" tabindex="-1">2. <strong>StringBuffer (可变 + 线程安全)</strong> <a class="header-anchor" href="#_2-stringbuffer-可变-线程安全" aria-hidden="true">#</a></h3><ul><li><strong>核心特性</strong>：可变（Mutable），修改直接在原对象上进行。</li><li><strong>线程安全</strong>：<strong>线程安全</strong>（所有方法用<code>synchronized</code>修饰）。</li><li><strong>性能</strong>：比<code>String</code>高效（减少对象创建），但因同步锁开销，单线程下慢于<code>StringBuilder</code>。</li><li><strong>典型场景</strong>：多线程环境下的字符串修改（如Web应用）。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">StringBuffer</span><span style="color:#A6ACCD;"> sb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuffer</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 修改原对象，无新对象产生</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="_3-stringbuilder-可变-非线程安全" tabindex="-1">3. <strong>StringBuilder (可变 + 非线程安全)</strong> <a class="header-anchor" href="#_3-stringbuilder-可变-非线程安全" aria-hidden="true">#</a></h3><ul><li><strong>核心特性</strong>：可变（Mutable），API与<code>StringBuffer</code>兼容（非线程安全版）。</li><li><strong>线程安全</strong>：<strong>非线程安全</strong>（无同步锁）。</li><li><strong>性能</strong>：单线程下<strong>最快</strong>（无同步开销）。</li><li><strong>典型场景</strong>：单线程环境下的高频字符串操作（如循环拼接）。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">StringBuilder</span><span style="color:#A6ACCD;"> sb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 修改原对象，效率最高（单线程）</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="性能对比-单线程" tabindex="-1">性能对比（单线程） <a class="header-anchor" href="#性能对比-单线程" aria-hidden="true">#</a></h3><table><thead><tr><th>操作</th><th><code>String</code></th><th><code>StringBuffer</code></th><th><code>StringBuilder</code></th></tr></thead><tbody><tr><td>10万次字符串拼接</td><td>慢（约2000ms+）</td><td>中（约5ms）</td><td><strong>快（约3ms）</strong></td></tr><tr><td>内存占用</td><td>高（对象爆炸）</td><td>低</td><td>低</td></tr><tr><td>线程安全</td><td>✅</td><td>✅</td><td>❌</td></tr></tbody></table><hr><h3 id="如何选择" tabindex="-1">如何选择？ <a class="header-anchor" href="#如何选择" aria-hidden="true">#</a></h3><table><thead><tr><th>场景</th><th>推荐类</th></tr></thead><tbody><tr><td>字符串常量、不修改</td><td><code>String</code></td></tr><tr><td><strong>多线程</strong>环境修改字符串</td><td><code>StringBuffer</code></td></tr><tr><td><strong>单线程</strong>环境修改字符串（主流）</td><td><code>StringBuilder</code></td></tr></tbody></table><blockquote><p><strong>最佳实践</strong>：</p><ul><li>JDK 5+开始，编译器会自动将<code>String</code>的<code>+</code>拼接优化为<code>StringBuilder</code>（仅适用于循环外简单拼接）。</li><li>循环内拼接<strong>务必手动使用<code>StringBuilder</code></strong>，避免编译器优化失效：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 正确示例</span></span>
<span class="line"><span style="color:#C792EA;">StringBuilder</span><span style="color:#A6ACCD;"> sb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 只创建一个对象</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></blockquote><hr><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h3><table><thead><tr><th>特性</th><th><code>String</code></th><th><code>StringBuffer</code></th><th><code>StringBuilder</code></th></tr></thead><tbody><tr><td><strong>可变性</strong></td><td>❌（不可变）</td><td>✅（可变）</td><td>✅（可变）</td></tr><tr><td><strong>线程安全</strong></td><td>✅（天然）</td><td>✅（同步锁）</td><td>❌（无锁）</td></tr><tr><td><strong>性能</strong></td><td>低（频繁修改时）</td><td>中（锁开销）</td><td><strong>高</strong>（单线程首选）</td></tr><tr><td><strong>使用场景</strong></td><td>常量、少量修改</td><td>多线程环境</td><td>单线程高频操作</td></tr></tbody></table><hr><h1 id="java中的动态代理是基于什么原理" tabindex="-1">java中的动态代理是基于什么原理？ <a class="header-anchor" href="#java中的动态代理是基于什么原理" aria-hidden="true">#</a></h1><p>在Java中，动态代理是一种在运行时动态生成代理类对象的机制，它基于以下核心原理：</p><hr><h3 id="核心原理" tabindex="-1"><strong>核心原理</strong> <a class="header-anchor" href="#核心原理" aria-hidden="true">#</a></h3><ol><li><p><strong>运行时字节码生成</strong></p><ul><li>当调用<code>Proxy.newProxyInstance()</code>方法时，JVM会在内存中动态生成一个代理类的字节码（.class文件）。</li><li>生成的代理类继承自<code>java.lang.reflect.Proxy</code>类，并实现用户指定的接口（若接口非public则需同一ClassLoader加载）。</li><li>这一过程由<code>Proxy</code>类的内部逻辑完成，无需手动编写代理类代码。</li></ul></li><li><p><strong>方法调用委派机制</strong></p><ul><li>代理类中所有方法调用都会被重定向到一个统一的处理器：<code>InvocationHandler.invoke()</code>。</li><li>代理类的每个方法内部逻辑如下：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">ReturnType</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">methodName</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Parameters</span><span style="color:#A6ACCD;"> params</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> handler</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">invoke</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this,</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 代理对象自身</span></span>
<span class="line"><span style="color:#A6ACCD;">        method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 目标方法（通过反射获取的Method对象）</span></span>
<span class="line"><span style="color:#A6ACCD;">        args    </span><span style="color:#676E95;font-style:italic;">// 方法参数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p><strong>反射调用目标方法</strong></p><ul><li>在<code>InvocationHandler.invoke()</code>的实现中，通过反射机制（<code>method.invoke(target, args)</code>）调用被代理对象的实际方法。</li><li>开发者可在<code>invoke()</code>中加入自定义逻辑（如性能监控、事务控制等）。</li></ul></li></ol><hr><h3 id="核心组件" tabindex="-1"><strong>核心组件</strong> <a class="header-anchor" href="#核心组件" aria-hidden="true">#</a></h3><ol><li><p><strong><code>java.lang.reflect.Proxy</code></strong></p><ul><li>入口类，提供静态方法创建代理对象：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">Foo</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Foo</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> Proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newProxyInstance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClass</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getClassLoader</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1. 类加载器</span></span>
<span class="line"><span style="color:#A6ACCD;">    target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClass</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getInterfaces</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 2. 代理需实现的接口数组</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyInvocationHandler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 3. 调用处理器</span></span>
<span class="line"><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p><strong><code>java.lang.reflect.InvocationHandler</code></strong></p><ul><li>单方法接口，定义代理行为的核心逻辑：<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InvocationHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">invoke</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Method</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Throwable</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ol><hr><h3 id="工作流程" tabindex="-1"><strong>工作流程</strong> <a class="header-anchor" href="#工作流程" aria-hidden="true">#</a></h3><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">sequenceDiagram</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">participant</span><span style="color:#A6ACCD;"> Client </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">客户端</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">participant</span><span style="color:#A6ACCD;"> Proxy </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">动态代理对象</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">participant</span><span style="color:#A6ACCD;"> Handler </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">InvocationHandler</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">participant</span><span style="color:#A6ACCD;"> Target </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">被代理对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    Client </span><span style="color:#89DDFF;font-style:italic;">-&gt;&gt;</span><span style="color:#A6ACCD;"> Proxy</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">调用接口方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">over</span><span style="color:#A6ACCD;"> Proxy</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">自动拦截方法调用</span></span>
<span class="line"><span style="color:#A6ACCD;">    Proxy </span><span style="color:#89DDFF;font-style:italic;">-&gt;&gt;</span><span style="color:#A6ACCD;"> Handler</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">转发调用至invoke()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">over</span><span style="color:#A6ACCD;"> Handler</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">执行前置逻辑(如日志)</span></span>
<span class="line"><span style="color:#A6ACCD;">    Handler </span><span style="color:#89DDFF;font-style:italic;">-&gt;&gt;</span><span style="color:#A6ACCD;"> Target</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">反射调用实际方法(method.invoke())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">over</span><span style="color:#A6ACCD;"> Handler</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">执行后置逻辑(如事务提交)</span></span>
<span class="line"><span style="color:#A6ACCD;">    Target </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> Handler</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">返回结果</span></span>
<span class="line"><span style="color:#A6ACCD;">    Handler </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> Proxy</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">返回结果</span></span>
<span class="line"><span style="color:#A6ACCD;">    Proxy </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> Client</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">返回结果</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="关键特点" tabindex="-1"><strong>关键特点</strong> <a class="header-anchor" href="#关键特点" aria-hidden="true">#</a></h3><ol><li><p><strong>接口代理</strong></p><ul><li>动态代理只能基于接口生成代理（继承<code>Proxy</code>类导致无法再继承其他类）。</li><li>若需代理无接口的类，需使用第三方库（如CGLib或Byte Buddy）。</li></ul></li><li><p><strong>性能开销</strong></p><ul><li>反射调用有性能损耗（JVM优化的<code>MethodHandle</code>可缓解）。</li><li>代理类首次生成后会被缓存复用。</li></ul></li><li><p><strong>动态性</strong></p><ul><li>代理逻辑（<code>InvocationHandler</code>）可在运行时替换，实现高度灵活的AOP编程。</li></ul></li></ol><hr><h3 id="底层实现机制" tabindex="-1"><strong>底层实现机制</strong> <a class="header-anchor" href="#底层实现机制" aria-hidden="true">#</a></h3><ol><li><p><strong>字节码生成过程</strong></p><ul><li><code>sun.misc.ProxyGenerator</code>动态生成代理类字节码。</li><li>通过<code>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true</code>可导出.class文件查看：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$Proxy0.class</span></span>
<span class="line"></span></code></pre></div></li></ul></li><li><p><strong>代理类示例</strong>（反编译后）</p></li></ol><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">$Proxy0</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Proxy</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Method</span><span style="color:#A6ACCD;"> m1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 目标方法的Method引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> $</span><span style="color:#82AAFF;">Proxy0</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InvocationHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">h</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        super</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 所有方法调用转发至InvocationHandler</span></span>
<span class="line"><span style="color:#A6ACCD;">        h</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">invoke</span><span style="color:#89DDFF;">(this,</span><span style="color:#A6ACCD;"> m1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">[]{</span><span style="color:#A6ACCD;">arg</span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        m1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getMethod</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">doSomething</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><hr><h3 id="典型应用场景" tabindex="-1"><strong>典型应用场景</strong> <a class="header-anchor" href="#典型应用场景" aria-hidden="true">#</a></h3><ol><li><strong>AOP（面向切面编程）</strong><ul><li>Spring AOP使用动态代理实现事务管理、安全控制等横切关注点。</li></ul></li><li><strong>RPC框架</strong><ul><li>Dubbo、gRPC等通过动态代理隐藏远程调用细节（如序列化/网络传输）。</li></ul></li><li><strong>测试框架</strong><ul><li>Mockito利用动态代理创建模拟对象。</li></ul></li><li><strong>装饰器模式增强</strong><ul><li>动态添加日志记录、性能监控等非业务功能。</li></ul></li></ol><hr><h3 id="对比静态代理" tabindex="-1"><strong>对比静态代理</strong> <a class="header-anchor" href="#对比静态代理" aria-hidden="true">#</a></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>动态代理</strong></th><th><strong>静态代理</strong></th></tr></thead><tbody><tr><td>代码编写</td><td>无需手动编写代理类</td><td>需为每个接口编写代理类</td></tr><tr><td>可维护性</td><td>修改代理逻辑只需调整<code>InvocationHandler</code></td><td>需修改所有代理类源码</td></tr><tr><td>接口变化适应性</td><td>自动适配接口新增方法</td><td>需同步修改代理类</td></tr><tr><td>性能</td><td>反射调用有轻微开销</td><td>直接调用，无额外开销</td></tr></tbody></table><hr><h3 id="示例代码" tabindex="-1"><strong>示例代码</strong> <a class="header-anchor" href="#示例代码" aria-hidden="true">#</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. 定义接口</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Calculator</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 目标实现类</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CalculatorImpl</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Calculator</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. 调用处理器</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebugHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InvocationHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> target</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">DebugHandler</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">target </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> target</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">invoke</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Method</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">调用方法: %s，参数: %s%n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> Arrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">invoke</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 反射调用目标方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">结果: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 4. 客户端使用</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Demo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Calculator</span><span style="color:#A6ACCD;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CalculatorImpl</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Calculator</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Calculator</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> Proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newProxyInstance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClass</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getClassLoader</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">[]{</span><span style="color:#A6ACCD;">Calculator</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DebugHandler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#A6ACCD;">        proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出调试日志并计算结果</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>输出</strong>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">调用方法: add，参数: [2, 3]</span></span>
<span class="line"><span style="color:#A6ACCD;">结果: 5</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><hr><h3 id="总结-1" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-1" aria-hidden="true">#</a></h3><p>Java动态代理的本质是利用<strong>运行时生成字节码技术</strong> + <strong>方法调用委派机制</strong> + <strong>反射API</strong>，在接口级别实现代理模式。其核心价值在于：</p><ul><li><strong>解耦</strong>：将代理逻辑从业务代码中剥离。</li><li><strong>动态性</strong>：运行时灵活生成代理对象。</li><li><strong>可扩展性</strong>：通过<code>InvocationHandler</code>支持多样化的增强逻辑。 但需注意其局限于接口代理，对类代理需依赖第三方字节码库（如CGLib）。</li></ul><hr><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1>`,234),p=[t];function e(r,c,y,D,i,F){return a(),n("div",null,p)}const d=s(o,[["render",e]]);export{C as __pageData,d as default};
