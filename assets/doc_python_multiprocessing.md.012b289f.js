import{_ as s,c as n,o as a,b as l}from"./app.51192dfd.js";const C=JSON.parse('{"title":"python 如何实现多线程","description":"","frontmatter":{},"headers":[],"relativePath":"doc/python/multiprocessing.md","lastUpdated":1682656853000}'),p={name:"doc/python/multiprocessing.md"},o=l(`<h1 id="python-如何实现多线程" tabindex="-1">python 如何实现多线程 <a class="header-anchor" href="#python-如何实现多线程" aria-hidden="true">#</a></h1><p>Python多线程是指在一个程序中同时创建和使用多个执行流来执行不同的任务¹。Python多线程可以使用<strong>threading模块</strong>或<strong>multiprocessing库</strong>¹。Python多线程有两种创建方式：通过<strong>threading.Thread()函数</strong>或通过<strong>继承threading.Thread类</strong>²³。Python多线程只有在I/O密集型程序时效率才会有明显提高，因为Python虚拟机有<strong>全局解释器锁（GIL）<strong>限制同时只能有一个线程在运行⁴。Python多线程可以使用</strong>线程池</strong>来重用线程和简化语法，线程池可以用<strong>ThreadPoolExecutor</strong>实现⁵。</p><p>源: 与必应的对话， 4/28/2023 (1) Python 多线程 | 菜鸟教程. <a href="https://www.runoob.com/python/python-multithreading.html" target="_blank" rel="noreferrer">https://www.runoob.com/python/python-multithreading.html</a>. (2) Python threading实现多线程 基础篇 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/91601448" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/91601448</a>. (3) 寻找python大神！！！python如何多线程并发？ - 知乎. <a href="https://www.zhihu.com/question/315908877" target="_blank" rel="noreferrer">https://www.zhihu.com/question/315908877</a>. (4) 超详细，Python 多线程总结的太到位了 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/427537893" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/427537893</a>. (5) Python多线程的原理与实现 - CSDN博客. <a href="https://blog.csdn.net/daiyu__zz/article/details/81912018" target="_blank" rel="noreferrer">https://blog.csdn.net/daiyu__zz/article/details/81912018</a>.</p><h2 id="请告诉我什么是全局解释器锁-gil-。" tabindex="-1">请告诉我什么是全局解释器锁（GIL）。 <a class="header-anchor" href="#请告诉我什么是全局解释器锁-gil-。" aria-hidden="true">#</a></h2><p>全局解释器锁（GIL）是CPython解释器中的一个互斥锁，它保证了同一时刻只有一个线程可以执行Python字节码¹。GIL的存在是为了防止多线程访问Python对象时产生的竞争危害，从而保证线程安全¹²。GIL并不是Python语言的特性，而是CPython解释器的实现细节，其他的解释器如Jython或PyPy可能没有GIL¹²。</p><p>GIL的缺点是它限制了多线程程序在多核CPU上的并行能力，因为只有一个线程可以运行Python字节码，其他线程必须等待¹²。这对于计算密集型的任务是不利的，因为它无法充分利用多核处理器的优势。但对于I/O密集型的任务，GIL的影响较小，因为很多I/O操作会释放GIL，从而让其他线程有机会运行¹²。</p><p>GIL并不是一个理想的设计，但由于CPython的内存管理不是线程安全的，以及很多现有的特性和模块依赖于GIL的保证，所以很难移除GIL而不破坏兼容性¹²。要绕过GIL的限制，可以使用多进程或者其他解释器²³。</p><p>源: 与必应的对话， 4/28/2023 (1) 深入理解Python中的GIL（全局解释器锁）。 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/75780308" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/75780308</a>. (2) 【Python】到底什么是全局解释器锁（GIL）？ - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/493266886" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/493266886</a>. (3) 为什么CPython需要GIL? - 知乎. <a href="https://www.zhihu.com/question/56170408" target="_blank" rel="noreferrer">https://www.zhihu.com/question/56170408</a>. (4) 什么是Python全局解释器锁GIL（Global Interpreter Lock）？ - 知乎. <a href="https://zhuanlan.zhihu.com/p/56352731" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/56352731</a>. (5) Python | GIL锁 | 5分钟掌握【全局解释器锁】(GIL) - CSDN博客. <a href="https://blog.csdn.net/qq_29654325/article/details/128850131" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_29654325/article/details/128850131</a>.</p><h2 id="请给我一个threading-thread-函数的例子。" tabindex="-1">请给我一个threading.Thread()函数的例子。 <a class="header-anchor" href="#请给我一个threading-thread-函数的例子。" aria-hidden="true">#</a></h2><p>threading.Thread()函数是一种创建线程的方法，它需要传入一个可调用的对象（函数或类的实例方法）作为target参数，以及可选的args或kwargs参数作为调用对象的参数¹²。下面是一个简单的例子，使用threading.Thread()函数创建两个线程，分别执行两个函数¹：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> threading</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 定义两个函数，分别打印当前时间和休眠一段时间</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">print_time</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">当前时间：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ctime</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sleep_time</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">sec</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">开始休眠：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> sec</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">秒</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sec</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">结束休眠</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 创建两个线程对象，分别指定target和args</span></span>
<span class="line"><span style="color:#A6ACCD;">t1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> threading</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">print_time</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">t2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> threading</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sleep_time</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动两个线程</span></span>
<span class="line"><span style="color:#A6ACCD;">t1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">t2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 等待两个线程结束</span></span>
<span class="line"><span style="color:#A6ACCD;">t1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">t2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">主线程结束</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>源: 与必应的对话， 4/28/2023 (1) Python多线程之threading.Thread()基本使用 - 南风丶轻语 - 博客园. <a href="https://www.cnblogs.com/rainbow-tan/p/16305562.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/rainbow-tan/p/16305562.html</a>. (2) Python多线程库threading的使用 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/106905974" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/106905974</a>. (3) python多线程之从Thread类继承 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/34004447" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/34004447</a>. (4) Python 多线程 | 菜鸟教程. <a href="https://www.runoob.com/python/python-multithreading.html" target="_blank" rel="noreferrer">https://www.runoob.com/python/python-multithreading.html</a>.</p><h2 id="请给我一个继承threading-thread类的例子。" tabindex="-1">请给我一个继承threading.Thread类的例子。 <a class="header-anchor" href="#请给我一个继承threading-thread类的例子。" aria-hidden="true">#</a></h2><p>继承threading.Thread类是一种创建线程的方法，它需要定义一个子类，重写__init__方法和run方法²³。__init__方法用于初始化线程对象的属性，run方法用于定义线程执行的任务²。下面是一个简单的例子，使用继承threading.Thread类创建两个线程，分别打印当前时间和休眠一段时间³：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> threading</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 定义一个子类，继承threading.Thread类</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyThread</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">threading</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Thread</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 重写__init__方法，接收name和sec两个参数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sec</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># 调用父类的__init__方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        threading</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># 设置线程对象的name属性</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> name</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># 设置线程对象的sec属性</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sec</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sec</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 重写run方法，定义线程执行的任务</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># 打印当前时间和线程名</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">当前时间：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ctime</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程名：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># 休眠sec秒</span></span>
<span class="line"><span style="color:#A6ACCD;">        time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">sec</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># 打印结束信息</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">结束</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 创建两个线程对象，分别传入不同的name和sec参数</span></span>
<span class="line"><span style="color:#A6ACCD;">t1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyThread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Thread-1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">t2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyThread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Thread-2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动两个线程</span></span>
<span class="line"><span style="color:#A6ACCD;">t1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">t2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 等待两个线程结束</span></span>
<span class="line"><span style="color:#A6ACCD;">t1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">t2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">主线程结束</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>源: 与必应的对话， 4/28/2023 (1) Python学习笔记之：threading.Thread 类的继承和改造 - CSDN博客. <a href="https://blog.csdn.net/qq_42902997/article/details/107565540" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_42902997/article/details/107565540</a>. (2) python多线程threading模块的一些总结 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/147023085" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/147023085</a>. (3) python多线程之从Thread类继承 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/34004447" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/34004447</a>.</p><h2 id="请给我一个threadpoolexecutor的例子。" tabindex="-1">请给我一个ThreadPoolExecutor的例子。 <a class="header-anchor" href="#请给我一个threadpoolexecutor的例子。" aria-hidden="true">#</a></h2><p>ThreadPoolExecutor是一个类，它可以创建一个线程池，用于执行一组任务，并管理线程的生命周期和任务的返回值¹。ThreadPoolExecutor可以使用concurrent.futures模块中的函数创建，也可以直接实例化¹。下面是一个简单的例子，使用ThreadPoolExecutor创建一个线程池，用于计算一组数的平方和¹：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">futures</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> math</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 定义一个函数，计算一个数的平方和</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">square_sum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">**</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sqrt</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 创建一个列表，存放要计算的数</span></span>
<span class="line"><span style="color:#A6ACCD;">numbers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 创建一个线程池，指定最大线程数为3</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">futures</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ThreadPoolExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">max_workers</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> executor</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 使用map方法，将函数和列表中的每个元素作为参数传递给线程池</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 返回一个迭代器，包含每个任务的返回值</span></span>
<span class="line"><span style="color:#A6ACCD;">    results </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> executor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">square_sum</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> numbers</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 遍历迭代器，打印结果</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> results</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>源: 与必应的对话， 4/28/2023 (1) ThreadPoolExecutor - Java Thread Pool Example | DigitalOcean. <a href="https://www.digitalocean.com/community/tutorials/threadpoolexecutor-java-thread-pool-example-executorservice" target="_blank" rel="noreferrer">https://www.digitalocean.com/community/tutorials/threadpoolexecutor-java-thread-pool-example-executorservice</a>. (2) python线程池 ThreadPoolExecutor 的用法及实战 - 知乎. <a href="https://zhuanlan.zhihu.com/p/65638744" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/65638744</a>. (3) ThreadPoolTaskExecutor和ThreadPoolExecutor区别 - CSDN博客. <a href="https://blog.csdn.net/weixin_43168010/article/details/97613895" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_43168010/article/details/97613895</a>. (4) ThreadPoolExecutor使用详解 - WakamiyaShinobu - 博客园. <a href="https://www.cnblogs.com/zedosu/p/6665306.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/zedosu/p/6665306.html</a>. (5) ThreadPoolExecutor_百度百科. <a href="https://baike.baidu.com/item/ThreadPoolExecutor/16243794" target="_blank" rel="noreferrer">https://baike.baidu.com/item/ThreadPoolExecutor/16243794</a>.</p><h1 id="python-如何实现多进程" tabindex="-1">python 如何实现多进程 <a class="header-anchor" href="#python-如何实现多进程" aria-hidden="true">#</a></h1><h2 id="请给我一个multiprocessing库的例子。" tabindex="-1">请给我一个multiprocessing库的例子。 <a class="header-anchor" href="#请给我一个multiprocessing库的例子。" aria-hidden="true">#</a></h2><p>multiprocessing库是一个模块，它可以创建多个进程，用于执行一组任务，并利用多核CPU的优势³。multiprocessing库提供了多种方式来创建和管理进程，例如Process类，Pool类，Queue类等³。下面是一个简单的例子，使用multiprocessing库创建两个进程，分别打印当前时间和休眠一段时间⁴：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> multiprocessing</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 定义两个函数，分别打印当前时间和休眠一段时间</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">print_time</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">当前时间：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ctime</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sleep_time</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">sec</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">开始休眠：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> sec</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">秒</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sec</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">结束休眠</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 创建两个进程对象，分别指定target和args</span></span>
<span class="line"><span style="color:#A6ACCD;">p1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> multiprocessing</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Process</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">print_time</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">p2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> multiprocessing</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Process</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sleep_time</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">=(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动两个进程</span></span>
<span class="line"><span style="color:#A6ACCD;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">p2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 等待两个进程结束</span></span>
<span class="line"><span style="color:#A6ACCD;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">p2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">主进程结束</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>源: 与必应的对话， 4/28/2023 (1) Python多进程运行——Multiprocessing基础教程1 - 知乎. <a href="https://zhuanlan.zhihu.com/p/194349143" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/194349143</a>. (2) python的multiprocessing库如何使用 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/609923110" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/609923110</a>. (3) python的multiprocessing库如何使用 - 知乎 - 知乎专栏. <a href="https://bing.com/search?q=multiprocessing%e5%ba%93%e7%9a%84%e4%be%8b%e5%ad%90" target="_blank" rel="noreferrer">https://bing.com/search?q=multiprocessing库的例子</a>. (4) python并行计算（下）：multiprocessing模块实例 - 知乎. <a href="https://zhuanlan.zhihu.com/p/46718327" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/46718327</a>.</p><h2 id="多进程除了使用multiprocessing库-还有什么方式" tabindex="-1">多进程除了使用multiprocessing库，还有什么方式 <a class="header-anchor" href="#多进程除了使用multiprocessing库-还有什么方式" aria-hidden="true">#</a></h2><p>除了使用multiprocessing库，还有一些其他的方式来实现多进程，例如：</p><ul><li>使用os模块的fork函数，在Unix系统上创建子进程¹。例如：</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">child</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是子进程，我的pid是</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getpid</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parent</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是父进程，我的pid是</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getpid</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    newpid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fork</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> newpid </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">child</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我创建了一个子进程，它的pid是</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> newpid</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">父进程结束</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">parent</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><ul><li>使用subprocess模块，可以启动和控制其他程序，获取它们的输出或向它们发送输入²。例如：</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> subprocess</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动一个ping命令，返回一个Popen对象</span></span>
<span class="line"><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> subprocess</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Popen</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ping</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">www.baidu.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 等待子进程结束，返回退出码</span></span>
<span class="line"><span style="color:#A6ACCD;">retcode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 获取子进程的标准输出和标准错误</span></span>
<span class="line"><span style="color:#A6ACCD;">output</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> error </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">communicate</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 检查子进程是否正常结束</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> retcode </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">子进程成功执行</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">子进程出错</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><ul><li>使用concurrent.futures模块，可以使用高级的抽象接口来管理多进程，如Executor和Future类³。例如：</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">futures</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> math</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 定义一个计算平方根的函数</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sqrt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sqrt</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 创建一个进程池，最多有4个进程</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">futures</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ProcessPoolExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">max_workers</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> executor</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 提交10个任务到进程池，返回一个迭代器</span></span>
<span class="line"><span style="color:#A6ACCD;">    futures </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">executor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">submit</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sqrt</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 遍历迭代器，获取每个任务的结果</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> future </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">futures</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">as_completed</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">futures</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">future</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span></code></pre></div><p>源: 与必应的对话， 4/28/2023 (1) 在Python中优雅地用多进程 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/340657122" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/340657122</a>. (2) Python多进程并行操作-multiprocessing简单使用 - 知乎. <a href="https://zhuanlan.zhihu.com/p/423309871" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/423309871</a>. (3) 多进程Multiprocessing笔记 - 知乎. <a href="https://zhuanlan.zhihu.com/p/136995403" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/136995403</a>.</p><h2 id="请给我一个subprocess模块的例子。" tabindex="-1">请给我一个subprocess模块的例子。 <a class="header-anchor" href="#请给我一个subprocess模块的例子。" aria-hidden="true">#</a></h2><p>subprocess模块是一个用于创建和管理子进程的模块，它可以执行操作系统的命令，并获取它们的输入、输出和错误¹。subprocess模块提供了一个高级的函数run()，以及一个低级的类Popen()，来调用子进程²。</p><p>下面是一个使用subprocess模块的例子，它执行了一个ping命令，并获取了它的输出和返回码：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> subprocess</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动一个ping命令，返回一个Popen对象</span></span>
<span class="line"><span style="color:#A6ACCD;">p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> subprocess</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Popen</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ping</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">www.baidu.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 等待子进程结束，返回退出码</span></span>
<span class="line"><span style="color:#A6ACCD;">retcode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 获取子进程的标准输出和标准错误</span></span>
<span class="line"><span style="color:#A6ACCD;">output</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> error </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">communicate</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 检查子进程是否正常结束</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> retcode </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">子进程成功执行</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">子进程出错</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>源: 与必应的对话， 4/28/2023 (1) Python3 subprocess | 菜鸟教程. <a href="https://www.runoob.com/w3cnote/python3-subprocess.html" target="_blank" rel="noreferrer">https://www.runoob.com/w3cnote/python3-subprocess.html</a>. (2) 每周一个 Python 模块 | subprocess - 知乎. <a href="https://zhuanlan.zhihu.com/p/91342640" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/91342640</a>. (3) activiti学习笔记——Sub-Process_activiti的sub_朱大柠的博客-CSDN博客. <a href="https://blog.csdn.net/JohnnieZhu/article/details/102701669" target="_blank" rel="noreferrer">https://blog.csdn.net/JohnnieZhu/article/details/102701669</a>. (4) python之subprocess模块详解--小白博客 - 夜风2019 - 博客园. <a href="https://www.cnblogs.com/zhou2019/p/10582716.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/zhou2019/p/10582716.html</a>.</p><h2 id="如何在多个进程之间进行通信" tabindex="-1">如何在多个进程之间进行通信？ <a class="header-anchor" href="#如何在多个进程之间进行通信" aria-hidden="true">#</a></h2><p>多个进程之间进行通信的方法有很多，常见的有以下几种：</p><ul><li>管道（pipe）：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。²</li><li>高级管道（popen）：高级管道是一种将另一个程序当做一个新的进程在当前程序进程中启动的方式，可以实现双向通信。²</li><li>有名管道（named pipe）：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。²</li><li>消息队列（message queue）：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。²</li><li>信号量（semaphore）：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。²</li><li>信号（signal）：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。²</li><li>共享内存（shared memory）：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。²</li><li>套接字（socket）：套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。²</li></ul><p>Python中实现多进程间通信的方法有以下几种：</p><ul><li>multiprocessing模块提供了Queue类来实现多个进程之间的数据传递。Queue类是一个先进先出（FIFO）的队列，支持线程安全和阻塞操作。⁵</li><li>multiprocessing模块还提供了Pipe类来实现两个进程之间的双向或单向通信。Pipe类返回一对连接对象，分别表示管道的两端。每个连接对象都有send和recv方法来发送和接收数据。⁶</li><li>multiprocessing模块还提供了Value和Array类来实现多个进程之间共享一个值或一个数组。Value类可以创建一个ctypes对象，Array类可以创建一个ctypes数组。这些对象可以被多个进程同时访问和修改，但需要注意同步问题。⁵</li><li>Python 3.8新增了shared_memory模块来实现多个进程之间共享内存中的数据结构。shared_memory模块提供了SharedMemory类来创建和管理共享内存对象，以及ShareableList类来创建和管理共享内存中的列表对象。这些对象可以被多个进程同时访问和修改，但需要注意同步问题。</li></ul><p>源: 与必应的对话， 4/28/2023 (1) 进程间8种通信方式详解 - 腾讯云开发者社区-腾讯云. <a href="https://cloud.tencent.com/developer/article/1690556" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/1690556</a>. (2) Python实现多进程间通信的方法总结 - CSDN博客. <a href="https://blog.csdn.net/tyhj_sf/article/details/97401263" target="_blank" rel="noreferrer">https://blog.csdn.net/tyhj_sf/article/details/97401263</a>. (3) 利用管道实现多进程间通信_多进程管道_maybeth的博客-CSDN博客. <a href="https://blog.csdn.net/maybeth/article/details/90314504" target="_blank" rel="noreferrer">https://blog.csdn.net/maybeth/article/details/90314504</a>. (4) Linux进程间通信——管道通信_Romeo i的博客-CSDN博客. <a href="https://bing.com/search?q=%e5%a6%82%e4%bd%95%e5%9c%a8%e5%a4%9a%e4%b8%aa%e8%bf%9b%e7%a8%8b%e4%b9%8b%e9%97%b4%e8%bf%9b%e8%a1%8c%e9%80%9a%e4%bf%a1" target="_blank" rel="noreferrer">https://bing.com/search?q=如何在多个进程之间进行通信</a>. (5) 进程间通信的7种方式 - 掘金. <a href="https://juejin.cn/post/7021888536097849358" target="_blank" rel="noreferrer">https://juejin.cn/post/7021888536097849358</a>. (6) 浅析进程间通信的几种方式（含实例源码） - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/94856678" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/94856678</a>.</p><h2 id="你能给我一些使用这些方法的代码示例吗" tabindex="-1">你能给我一些使用这些方法的代码示例吗？ <a class="header-anchor" href="#你能给我一些使用这些方法的代码示例吗" aria-hidden="true">#</a></h2><p>当然可以。这里是一些使用这些方法的代码示例：</p><ul><li>管道（pipe）：使用multiprocessing模块的Pipe类来创建一个管道对象，它返回一对连接对象，分别表示管道的两端。每个连接对象都有send和recv方法来发送和接收数据。¹</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> multiprocessing </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Pipe</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">son_process</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">pipe</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 子进程关闭管道的发送端</span></span>
<span class="line"><span style="color:#A6ACCD;">    pipe</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(None)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 子进程从管道的接收端读取数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pipe</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;子进程收到：</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">msg</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> __name__ </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__main__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 创建一个双向管道</span></span>
<span class="line"><span style="color:#A6ACCD;">    parent_conn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> child_conn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Pipe</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 创建一个子进程</span></span>
<span class="line"><span style="color:#A6ACCD;">    p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Process</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">son_process</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">=(</span><span style="color:#82AAFF;">child_conn</span><span style="color:#89DDFF;">,))</span></span>
<span class="line"><span style="color:#A6ACCD;">    p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 主进程关闭管道的接收端</span></span>
<span class="line"><span style="color:#A6ACCD;">    parent_conn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 主进程向管道的发送端写入数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    parent_conn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><ul><li>队列（queue）：使用multiprocessing模块的Queue类来创建一个队列对象，它是一个先进先出（FIFO）的队列，支持线程安全和阻塞操作。队列对象有put和get方法来存入和取出数据。¹</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> multiprocessing </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Queue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">son_process</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">queue</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 子进程从队列中获取数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;子进程收到：</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">msg</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 子进程向队列中放入数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> __name__ </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__main__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 创建一个队列</span></span>
<span class="line"><span style="color:#A6ACCD;">    q </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Queue</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 创建一个子进程</span></span>
<span class="line"><span style="color:#A6ACCD;">    p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Process</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">son_process</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">=(</span><span style="color:#82AAFF;">q</span><span style="color:#89DDFF;">,))</span></span>
<span class="line"><span style="color:#A6ACCD;">    p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 主进程向队列中放入数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    q</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 主进程从队列中获取数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> q</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;主进程收到：</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">msg</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><ul><li>共享内存（shared memory）：使用multiprocessing模块的Value和Array类来创建一个共享内存对象，它可以被多个进程同时访问和修改，但需要注意同步问题。Value类可以创建一个ctypes对象，Array类可以创建一个ctypes数组。¹</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> multiprocessing </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Array</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">son_process</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 子进程修改共享内存中的值和数组</span></span>
<span class="line"><span style="color:#A6ACCD;">    n</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.14</span></span>
<span class="line"><span style="color:#A6ACCD;">    a</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> __name__ </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__main__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 创建一个共享内存中的值和数组</span></span>
<span class="line"><span style="color:#A6ACCD;">    num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;主进程初始值：</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">num</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;主进程初始数组：</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">arr</span><span style="color:#89DDFF;">[:]</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 创建一个子进程</span></span>
<span class="line"><span style="color:#A6ACCD;">    p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Process</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">son_process</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">=(</span><span style="color:#82AAFF;">num</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> arr</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;主进程修改后的值：</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">num</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;主进程修改后的数组：</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">arr</span><span style="color:#89DDFF;">[:]</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>源: 与必应的对话， 4/28/2023 (1) 在Python中优雅地用多进程 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/340657122" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/340657122</a>. (2) Python多进程之进程间通信 - Pipe &amp; Queue - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/24883194" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/24883194</a>. (3) 一文读懂Python进程间通信的几种方式 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/446374478" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/446374478</a>.</p><h2 id="这些方法有什么优缺点吗" tabindex="-1">这些方法有什么优缺点吗？ <a class="header-anchor" href="#这些方法有什么优缺点吗" aria-hidden="true">#</a></h2><p>根据网上的一些资料，这些方法各自有以下优缺点：</p><ul><li>管道（pipe）：优点是读写效率高，适用于只有两个进程一读一写的单双工情况；缺点是功能较基本，不支持多个进程同时读写，也不支持阻塞和超时等操作。¹²</li><li>队列（queue）：优点是功能较丰富，支持多个进程同时读写，也支持阻塞和超时等操作；缺点是读写效率低于管道，需要考虑同步问题。¹²</li><li>共享内存（shared memory）：优点是无须复制，快捷，信息量大；缺点是需要解决进程间的读写同步问题，只能在同一台计算机上的进程共享，不方便网络通信。³⁴</li></ul><p>选择合适的方法取决于你的具体需求和场景。一般来说，你可以考虑以下几个因素：</p><ul><li>你需要多少个进程进行通信？如果只有两个进程，那么管道可能是一个简单而高效的选择；如果有多个进程，那么队列或共享内存可能更合适。</li><li>你需要传输什么样的数据？如果数据量较小，那么管道或队列都可以；如果数据量较大，那么共享内存可能更节省资源。</li><li>你需要多大的灵活性和可控性？如果你需要对通信进行更多的控制，例如阻塞、超时、优先级等，那么队列可能更适合你；如果你只需要基本的发送和接收功能，那么管道或共享内存可能足够了。</li><li>你需要考虑什么样的性能和安全性？如果你追求高效的读写速度，那么管道或共享内存可能更快；如果你关心进程间的同步和安全问题，那么队列可能更稳定。</li></ul><p>源: 与必应的对话， 4/28/2023 (1) 一文读懂Python进程间通信的几种方式 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/446374478" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/446374478</a>. (2) 在Python中优雅地用多进程 - 知乎 - 知乎专栏. <a href="https://zhuanlan.zhihu.com/p/340657122" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/340657122</a>. (3) 进程间通信方式以及各自的优缺点 - CSDN博客. <a href="https://blog.csdn.net/echo_ana/article/details/53456543" target="_blank" rel="noreferrer">https://blog.csdn.net/echo_ana/article/details/53456543</a>. (4) Python中的多线程与多进程的优缺点 - CSDN博客. <a href="https://blog.csdn.net/weixin_42738495/article/details/88073594" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_42738495/article/details/88073594</a>. (5) 多进程和多线程区别以及优缺点[通俗易懂] - 腾讯云. <a href="https://cloud.tencent.com/developer/article/2158791" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/2158791</a>.</p>`,60),e=[o];function t(r,c,y,F,D,i){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{C as __pageData,h as default};
